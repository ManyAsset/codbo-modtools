#name "xmodel"
#dll "all" "xmodel"
#target_dir "xmodel/"
#target_dir "xmodelparts/"
#target_dir "xmodelsurfs/"
#target_dir "xmodelpieces/"
#file_ext "*;*.dds;*.tga;*.jpg"
#version 70

enum { "rigid", "animated", "multiplayer body", "viewhands", "pieces" } type
string filename
float 0 0 1000000 highLodDist
int 0 0 1 forceMediumLodRigid
int 0 0 1 autogenMediumLod
int 50 0 100 autogenMediumLodPercent
string mediumLod
float 0 0 1000000 mediumLodDist
int 0 0 1 forceLowLodRigid
int 0 0 1 autogenLowLod
int 25 0 100 autogenLowLodPercent
string lowLod
float 0 0 1000000 lowLodDist
int 0 0 1 forceLowestLodRigid
int 0 0 1 autogenLowestLod
int 13 0 100 autogenLowestLodPercent
string lowestLod
float 0 0 1000000 lowestLodDist

int 0 0 1 crossFadeLods
int 0 0 15 cosmetic

//REMOVING LEGACY STUFF BA 1/23/09//
//int 0 0 1 groundLit
//int 0 0 1 noRadialNormals
//float 0 -1000000 1000000 radialOriginX
//float 0 -1000000 1000000 radialOriginY
//float 0 -1000000 1000000 radialOriginZ

int 0 0 1 allowHidingAllParts

int 0 0 1 noCastShadow
int 0 0 1 heroLighting

enum { "None", "High", "Medium", "Low", "Lowest" } BulletCollisionLOD
string CollisionMap

string hitBoxModel
string materials
string skinOverride
string boneControllers
string boneStabilizers
string physicsPreset
string physicsConstraints

float 1 0 10 bakeLightmapScale

int 0 0 1 streamable
int 0 0 1 streamAllLods
int 0 0 1 fp32

vcontainer
{
	checkbox(streamable)
//	checkbox(streamAllLods)

	hcontainer
	{
		scrollbox(type)
		[
			exec
			{
				tooltip("Rigid is for non-animated objects, animated is for objects that must animate.")
				width(320)
			}
		]
	}

	fileedit(filename)
	[
		exec
		{
			tooltip("the default high LOD distance is 250.")
			reldir("model_export/")
		}
	]

	floatedit(highLodDist, 1, 10)

	hcontainer
	{
		checkbox(forceMediumLodRigid)
		[
			exec
			{
				tooltip("Use this to save memory/CPU or for a collision mesh.")
				labelwidth(160)
			}
		]
	}

	fileedit(mediumLod)
	[
		exec
		{
			tooltip("the default medium LOD distance is 500.")
			reldir("model_export/")
		}
	]

	floatedit(mediumLodDist, 1, 10)

	hcontainer
	{
		checkbox(forceLowLodRigid)
		[
			exec
			{
				tooltip("Use this to save memory/CPU or for a collision mesh.")
				labelwidth(160)
			}
		]
	}

	fileedit(lowLod)
	[
		exec
		{
			tooltip("the default low LOD distance is 1000.")
			reldir("model_export/")
		}
	]

	floatedit(lowLodDist, 1, 10)

	hcontainer
	{
		checkbox(forceLowestLodRigid)
		[
			exec
			{
				tooltip("Use this to save memory/CPU or for a collision mesh.")
				labelwidth(160)
			}
		]
	}

	fileedit(lowestLod)
	[
		exec
		{
			tooltip("the default lowest LOD distance is 0.")
			reldir("model_export/")
		}
	]

	floatedit(lowestLodDist, 1, 10)

	hcontainer
	{
	scrollbox(BulletCollisionLOD)
	[
		exec
		{
				tooltip( "The lod that will be used for bullet collision.  Leaving this on 'None' means this model will not block bullets" )
		}
	]
	}
	
	fileedit(CollisionMap)
		[
			exec
			{
			tooltip("Specifies the collmap that will be used for this model.")
			reldir("raw/collmaps/")
	}
	]	

	vcontainer
	{
		spinedit(cosmetic,1,1)
		[
			exec
			{
				tooltip("Set cosmetic level, 0 to disable")
			}
		]
	}

	vcontainer
	{
		checkbox(crossFadeLods)
		[
			exec
			{
				tooltip("Cross fades lods during transitions.")
			}
		]
	}
//REMOVING LEGACY STUFF BA 1/23/09//
//	vcontainer
//	{
//		checkbox(groundLit)
//		[
//			exec
//			{
//				tooltip("This is for foliage to make it render faster.")
//				visible( type == "rigid" )
//			}
//		]
//	}

	vcontainer
	{
		checkbox(allowHidingAllParts)
		[
			exec
			{
				tooltip("Allows hiding of any independent parts.")
				visible( type == "rigid" || type == "animated" )
			}
		]
	}
	
	vcontainer
	{
		checkbox(noCastShadow)
		[
			exec
			{
				tooltip("Disable shadow casting.")
			}
		]
	}
	
	vcontainer
	{
		checkbox(heroLighting)
		[
			exec
			{
				tooltip("Forces this model to always pick up hero lighting.")
			}
		]
	}
	
	vcontainer
	{
		floatedit(bakeLightmapScale, 0, 10)
		[
			exec
			{
				tooltip("scale for generating lightmap coordinates from texture coordinates (will divide by 100)")
				visible( type == "rigid" )
				labelwidth(160)
			}
		]
	}
		
//REMOVING LEGACY STUFF BA 1/23/09//		
//	vcontainer
//	{
//		checkbox(noRadialNormals)
//		hcontainer
//		{
//			floatedit(radialOriginX, 1, 10)
//			[
//				exec
//				{
//					width(190)
//					labelwidth(100)
//				}
//			]
//			floatedit(radialOriginY, 1, 10)
//			[
//				exec
//				{
//					width(190)
//					labelwidth(100)
//				}
//			]
//			floatedit(radialOriginZ, 1, 10)
//			[
//				exec
//				{
//					width(190)
//					labelwidth(100)
//				}
//			]
//		}
//	}

	fileedit(hitBoxModel)
	[
		exec
		{
			tooltip("use this to specify a different hit box for your model.")
			reldir("model_export/")
		}
	]
	
	multiedit(materials)
	[
		exec
		{
			tooltip("Display the materials in filename, mediumLOD, lowLOD and lowestLOD files.")
			width(640)
			height(80)
		}
	]
	
	multiedit(skinOverride)
	[
		exec
		{
			tooltip("To make this work, first put the name of the material assigned to the model you as exported, followed by a space and then the name of the new material you wish to replace it with.  Multiple materials may be overridden by using multiple lines.")
			width(640)
			height(80)
		}
	]

	multiedit(boneControllers)
	[
		exec
		{
			tooltip("Used to specify a joint in a model to be controlled programmatically – list the script control first, space, then the joint being controlled will not work without function in script to match")
			width(640)
			height(80)
		}
 ]
	
	multiedit(boneStabilizers)
	[
		exec
		{
			tooltip("see bone controllers")
			width(640)
			height(80)
		}
	]	

	fileedit(physicsPreset)
	[
		exec
		{
			tooltip("Use this to choose a physics preset file for your model, leave blank for default unmovable object.")
			reldir("raw/physic/")
		}
	]

	fileedit(physicsConstraints)
	[
		exec
		{
			tooltip("Use this to choose a physics constraints file for your model.")
			reldir("raw/physconstraints/")
		}
	]

	checkbox(fp32)
	[
		exec
		{
			//visible(fp32 == 1) // visible only if enabled
			visible(1 == 0) // never visible
			tooltip("Use this to waste precious memory.")
		}
	]
}
