#name "vehicle"
#dll "all" "configstringconvert"
#target_dir "vehicles/"
#file_ext "*"
#version 50

// This tells the configstring converter what the file type identifier should be
string "VEHICLEFILE" configstringFileType

enum { "4 wheel", "motorcycle", "tank", "plane", "boat", "artillery", "helicopter" } type
enum { "chase", "first", "view", "strafe", "horse", "oldtank" } cameraMode
enum { "burst", "continuous" } boostMode

int 0 0 1 remoteControl
int 0 0 1 thirdPersonDriver
int 1 0 1 autoRecenterOnAccel
int 0 0 1 cameraAlwaysAutoCenter

float 0 0 100 cameraFOV
float 300 0 10000 thirdPersonCameraRange
float 100 0 1000 thirdPersonCameraHeight
float 100 0 1000 thirdPersonCameraHeightMin
float 0 -180 180 thirdPersonCameraPitch
float 0 -180 180 thirdPersonCameraPitchMin
float 45 0 90 thirdPersonCameraMinPitchClamp
float 70 0 90 thirdPersonCameraMaxPitchClamp
float 4 0 10000 cameraAutoCenterLerpRate
float 1 0 10000 cameraAutoCenterMaxLerpRate
float 0 0 256 thirdPersonCameraSpringDistance
float 1 0.1 10 thirdPersonCameraSpringTime
float 0 0 10000 thirdPersonCameraHandbrakeTurnRateInc

float 300 0 32000 killcamDist
float 50 0 32000 killcamZDist
float 100 0 32000 killcamMinDist
float 0 -32000 32000 killcamZTargetOffset
float 65 0 160 killcamFOV
int 1 0 1 killcamCollision

// the defaults and ranges are taken from: DOF_NEAR_BLUR_MIN, DOF_NEAR_BLUR_MAX, DOF_NEAR_BLUR_DEFAULT
float 6 4 10 killcamNearBlur
float 0 0 32000 killcamNearBlurStart
float 100 0 10000 killcamNearBlurEnd

// the defaults and ranges are taken from: DOF_FAR_BLUR_MIN, DOF_FAR_BLUR_MAX, DOF_FAR_BLUR_DEFAULT
float 1.8 0 10 killcamFarBlur
float 100 0 32000 killcamFarBlurStart
float 100 0 32000 killcamFarBlurEnd


int 0 0 1 steerWheels
int 0 0 1 texureScroll
int 0 0 1 quadBarrel
int 0 0 1 bulletDamage
int 1 0 1 armorPiercingDamage
int 0 0 1 grenadeDamage
int 0 0 1 projectileDamage
int 0 0 1 projectileSplashDamage
int 1 0 1 heavyExplosiveDamage

float 1 0 100 texureScrollScale
float 0 0 100 wheelRotRate
float 1 0 10 extraWheelRotScale
float 1100 0 2000 maxSpeed
float 300 0 1000 accel
float 0 0 2000 rotRate
float 0 0 2000 rotAccel

float 0 0 360 maxBodyPitch
float 0 0 360 maxBodyRoll

float 0 0 10000 collisionDamage
float 0 0 1000 collisionSpeed

float 1 0 2000 boostSpeedIncrease
float 1 0 2000 boostAccelMultiplier
float 3 0 2000 boostInterval
float 2 0 2000 boostDuration
float 1 0 10 boostFrictionMultiplier
float 1 0 10 boostContinuousRegenCooldown
float 1 0 10 boostContinuousRegenAmount

float 0 0 20 suspensionTravel

float 80 0 200 enterRadiusDriver
float 80 0 200 enterRadiusGunner1
float 80 0 200 enterRadiusGunner2
float 60 0 200 enterRadiusGunner3
float 60 0 200 enterRadiusGunner4

float 1 0.1 100 	heliCollisionScalar
float 0 -90 90 	viewPitchOffset
float 0 0 1 		viewInfluence

float 1.2 0.01 32000 	tiltSpeedPitch
float 1.2 0.01 32000 	tiltSpeedRoll
float 1 0 32000 	tiltFromVelocityPitch
float 1 0 32000 	tiltFromVelocityRoll
float 2 0.01 32000 	tiltFromAccelerationPitch
float 2 0.01 32000 	tiltFromAccelerationRoll
float 2 0 32000 	tiltFromDecelerationPitch
float 2 0 32000 	tiltFromDecelerationRoll

float 0 -32000 32000 	tracerOffsetForward
float 0 -32000 32000 	tracerOffsetUp

string turretWeapon
float 0 0 180 turretHorizSpanLeft
float 0 0 180 turretHorizSpanRight
float 0 0 180 turretVertSpanUp
float 0 0 180 turretVertSpanDown
float 0 0 360 turretRotRate
int 0 0 1 turretClampPlayerView
string turretTag1
string turretTag2
string turretTag3
string turretTag4

string gunnerWeapon
string gunnerWeapon1
string gunnerWeapon2
string gunnerWeapon3
float 50 0 360 gunnerRotRate

float 180 0 180 passenger1HorizSpanLeft
float 180 0 180 passenger1HorizSpanRight
float 180 0 180 passenger1VertSpanUp
float 180 0 180 passenger1VertSpanDown
float 180 0 180 passenger2HorizSpanLeft
float 180 0 180 passenger2HorizSpanRight
float 180 0 180 passenger2VertSpanUp
float 180 0 180 passenger2VertSpanDown
float 180 0 180 passenger3HorizSpanLeft
float 180 0 180 passenger3HorizSpanRight
float 180 0 180 passenger3VertSpanUp
float 180 0 180 passenger3VertSpanDown
float 180 0 180 passenger4HorizSpanLeft
float 180 0 180 passenger4HorizSpanRight
float 180 0 180 passenger4VertSpanUp
float 180 0 180 passenger4VertSpanDown
float 180 0 180 passenger5HorizSpanLeft
float 180 0 180 passenger5HorizSpanRight
float 180 0 180 passenger5VertSpanUp
float 180 0 180 passenger5VertSpanDown
float 180 0 180 passenger6HorizSpanLeft
float 180 0 180 passenger6HorizSpanRight
float 180 0 180 passenger6VertSpanUp
float 180 0 180 passenger6VertSpanDown

string lowIdleSnd
string lowIdleSndPlyr
string highIdleSnd
string lowEngineSnd
string highEngineSnd
string turretSpinSnd
string turretStopSnd
string engineModLoopSnd
string engineModLoopSndPlyr
string engineModLoopLoadSnd
string engineModLoopLoadSndPlyr
string tankBodyDmgLeftSnd
string tankBodyDmgRightSnd
float 2000 1 5000 engineModLoopNaturalRPMs
float 1200 1 5000 idleRPMs
float 1500 1 5000 idleRPMsMax
float 1400 1 5000 gear1MinRPMs
float 2000 1 5000 gear1MaxRPMs
float 8 1 40 gearChangeMPH
float 1500 1 5000 gear2MinRPMs
float 2400 1 5000 gear2MaxRPMs
string tankGrindLeftSnd
string tankGrindRightSnd
string tankGrindLeftDmgSnd
string tankGrindRightDmgSnd
float 0.5 0 1 treadGrindAttenuation
float 0.5 0 1 treadDamageLoopHealthRatio
float 0.5 0 1 clacksCurveDamageStart
float 0.7 0 1 clacksCurveDamageEnd
float 0.7 0 1 clacksCurveMaxOmitted
int 14 1 120 trackLengthInches
string tankBoostPerkSnd
string tankBoostPerkSndPlyr
string wheelRoadNoiseSnd
string wheelSlidingSnd
string wheelPeelingOutSnd
float 100 0 5000 skidSpeedMin
float 600 0 5000 skidSpeedMax

float 10 1 100 engineSndSpeed

int 0 0 1 isDrivable
int 0 0 9 numberOfSeats
int 0 0 4 numberOfGunners
int -1 -1 12 seatSwitchOrder1
int -1 -1 12 seatSwitchOrder2
int -1 -1 12 seatSwitchOrder3
int -1 -1 12 seatSwitchOrder4
int -1 -1 12 seatSwitchOrder5
int -1 -1 12 seatSwitchOrder6
int -1 -1 12 seatSwitchOrder7
int -1 -1 12 seatSwitchOrder8
int -1 -1 12 seatSwitchOrder9
int -1 -1 12 seatSwitchOrder10
int -1 -1 12 seatSwitchOrder11

int -1 -1 4 driverControlledGunPos

enum { "default", "tank with turret" } animType
string animSet

float 0 0 360 mantleAngleFront
float 90 0 360 mantleAngleBack
float 90 0 360 mantleAngleLeft
float 90 0 360 mantleAngleRight

string extraWheelLeft1
string extraWheelRight1
string extraWheelLeft2
string extraWheelRight2

string mod0
string tag0
string mod1
string tag1
string mod2
string tag2
string mod3
string tag3
string dmod0
string dtag0
string dmod1
string dtag1
string dmod2
string dtag2
string dmod3
string dtag3

string worldModel
string deathModel
float 0 0 100000 modelSwapDelay

string exhaustFx
int 0 0 1 oneExhaust

string rotorMainIdleFx
string rotorMainStartFx
string rotorMainRunningFx
string rotorMainStopFx

string rotorTailIdleFx
string rotorTailStartFx
string rotorTailRunningFx
string rotorTailStopFx

string deathFxName
string deathFxTag
string deathFxSound

float 0 0 10000 radiusDamageMin
float 0 0 10000 radiusDamageMax
float 0 0 5000 radiusDamageRadius

string shootShock
string shootRumble

float 0 0 1 deathQuakeScale
float 0 0 10 deathQuakeDuration
float 0 0 100000 deathQuakeRadius

string secTurretType
string secTurretTag
string secTurretModel
int 0 0 1 secTurretAiControlled

int 1000 0 100000 healthDefault
int 500 0 100000 healthMin
int 1500 0 100000 healthMax

string rumbleType
float 0 0 1 rumbleScale
float 0 0 10 rumbleDuration
float 0 0 100000 rumbleRadius
float 0 0 10 rumbleBaseTime
float 0 0 10 rumbleAdditionalTime

enum {"axis", "allies", "neutral"} team

float 0 0 1 frontArmor

string treadFxAsphalt
string treadFxBark
string treadFxBrick
string treadFxCarpet
string treadFxCeramic
string treadFxCloth
string treadFxConcrete
string treadFxDefault
string treadFxDirt
string treadFxFlesh
string treadFxFoliage
string treadFxGlass
string treadFxGrass
string treadFxGravel
string treadFxIce
string treadFxMetal
string treadFxMud
string treadFxPaintedMetal
string treadFxPlaster
string treadFxRock
string treadFxRubber
string treadFxSand
string treadFxSnow
string treadFxWater
string treadFxWood

int 0 0 1 addToCompass
int 0 0 1 addToCompassEnemy
string compassIcon

// button mappings
enum 
{ 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_RSHLDR", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X", 
"BUTTON_Y",
"none"
} gasButton

enum 
{ 
"none",
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_RSHLDR", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X", 
"BUTTON_Y",
"BUTTON_LSTICK",
"BUTTON_RSTICK"
} boostButton

enum 
{ 
"BUTTON_B", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_RSHLDR", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_X", 
"BUTTON_Y",
"BUTTON_LSTICK",
"BUTTON_RSTICK",
"none"
} reverseBrakeButton

enum 
{ 
"none",
"BUTTON_B", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_RSHLDR", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_X", 
"BUTTON_Y",
"BUTTON_LSTICK",
"BUTTON_RSTICK"
} handBrakeButton

enum 
{ 
"BUTTON_RTRIG", 
"BUTTON_LTRIG", 
"BUTTON_RSHLDR", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X", 
"BUTTON_Y",
"BUTTON_LSTICK",
"BUTTON_RSTICK",
"none"
} attackButton

enum 
{ 
"BUTTON_RSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X", 
"BUTTON_Y",
"BUTTON_LSTICK",
"BUTTON_RSTICK",
"none"
} attackSecondaryButton

enum 
{ 
"none",
"BUTTON_LSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_RSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X", 
"BUTTON_Y",
"BUTTON_LSTICK",
"BUTTON_RSTICK" 
} moveUpButton

enum 
{ 
"none",
"BUTTON_RSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X", 
"BUTTON_Y",
"BUTTON_LSTICK",
"BUTTON_RSTICK" 
} moveDownButton

enum 
{ 
"none",
"BUTTON_Y",
"BUTTON_RSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X",
"BUTTON_LSTICK",
"BUTTON_RSTICK"
} switchSeatButton

enum 
{ 
"none",
"BUTTON_Y",
"BUTTON_RSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X",
"BUTTON_LSTICK",
"BUTTON_RSTICK"
} specialAbilityButton

enum 
{ 
"none",
"BUTTON_Y",
"BUTTON_RSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X",
"BUTTON_LSTICK",
"BUTTON_RSTICK"
} firePickupButton

enum 
{ 
"none",
"BUTTON_Y",
"BUTTON_RSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X",
"BUTTON_LSTICK",
"BUTTON_RSTICK"
} swapPickupButton

enum 
{ 
"none",
"BUTTON_Y",
"BUTTON_RSHLDR", 
"BUTTON_LTRIG", 
"BUTTON_RTRIG", 
"BUTTON_LSHLDR", 
"BUTTON_A", 
"BUTTON_B", 
"BUTTON_X",
"BUTTON_LSTICK",
"BUTTON_RSTICK"
} dropDeployableButton

string steerGraph
string accelGraph

int 0 0 1 noDirectionalDamage

int 0 0 1 isNitrous
int 0 0 1 isFourWheelSteering
float 0.6 0 100000 nitrous_steer_angle_max
float 5 0 100000 nitrous_steer_speed
float 500 1 100000 nitrous_body_mass
float 15 1 100000 nitrous_wheel_radius
float 10 0 100000 nitrous_susp_adj
float 20 0 100000 nitrous_susp_spring_k
float 1 0 100000 nitrous_susp_damp_k
float 23 0 100000 nitrous_susp_hard_limit
float -100 -1000 1000 nitrous_susp_min_height
float 10000 0 100000 nitrous_tire_damp_hand
float 100 0 100000 nitrous_tire_damp_brake
float 10 0 100000 nitrous_tire_damp_coast
float 1 0 100000 nitrous_tire_fric_brake
float 0 0 100000 nitrous_tire_fric_hand_brake
float 1 0 100000 nitrous_tire_fric_fwd
float 1 0 100000 nitrous_tire_fric_side
float 0.7 0 100000 max_fric_tilt
float 0.1 0 100000 max_fric_tilt_angle
float 10 0 100000 nitrous_roll_stability
float 100 0 10000 nitrous_roll_resistance
float 0 0 10000 nitrous_yaw_resistance
float 50 0 100000 nitrous_upright_strength
float 0.0 0 100000 nitrous_tilt_fakey
enum { "TRACTION_TYPE_ALL_WD", "TRACTION_TYPE_FRONT", "TRACTION_TYPE_BACK" } nitrous_traction_type
float 150 0 100000 nitrous_peel_out_max_speed
float 0 0 100000 nitrous_tire_fric_side_max
float 0.8 0 100000 nitrous_reverse_scale
float 0 -100000 100000 nitrous_bbox_min_x
float 0 -100000 100000 nitrous_bbox_min_y
float 0 -100000 100000 nitrous_bbox_min_z
float 0 -100000 100000 nitrous_bbox_max_x
float 0 -100000 100000 nitrous_bbox_max_y
float 0 -100000 100000 nitrous_bbox_max_z
float 0 -100000 100000 nitrous_mass_center_offset_x
float 0 -100000 100000 nitrous_mass_center_offset_y
float 0 -100000 100000 nitrous_mass_center_offset_z
float 0 -100000 100000 nitrous_buoyancybox_min_x
float 0 -100000 100000 nitrous_buoyancybox_min_y
float 0 -100000 100000 nitrous_buoyancybox_min_z
float 0 -100000 100000 nitrous_buoyancybox_max_x
float 0 -100000 100000 nitrous_buoyancybox_max_y
float 0 -100000 100000 nitrous_buoyancybox_max_z
float 10 0 100000 nitrous_water_speed_max
float 4 0 100000 nitrous_water_accel_max
float 0.25 0 100000 nitrous_water_turn_accel
float 0.25 0 100000 nitrous_water_turn_speed_max
float 10.0 0 100 nitrous_boat_speed_rise
float 10.0 0 100 nitrous_boat_speed_tilt
float 0.0 -1000 1000 nitrous_boat_motor_offset_x
float 0.0 -1000 1000 nitrous_boat_motor_offset_y
float 0.0 -1000 1000 nitrous_boat_motor_offset_z
float 3 0 10 nitrous_boat_side_fric
float 0.4 0 10 nitrous_boat_forward_fric
float 0.5 0 10 nitrous_boat_vertical_fric
float 1.5 0 10 nitrous_boat_ebrake_power
float 12 0 100000 autoHandbrakeMinSpeed

vcontainer
{

	vcontainer
	{
		fileedit(worldModel)
		[
		  exec
		  {
			label("World Model")
			reldir("raw/xmodel/")
			width(600)
			labelwidth(150)
		  }
		]
		fileedit(deathModel)
		[
		  exec
		  {
			label("Death Model")
			reldir("raw/xmodel/")
			width(600)
			labelwidth(150)
		  }
		]
		floatedit(modelSwapDelay,0.01,0.1)
		[
		  exec
		  {
			label("Swap Delay")
			width(250)
			labelwidth(150)
		  }
		]
	}
	[
		exec
		{
			groupBox("Models")
		}
	]


	scrollbox(type)
	[
		exec
		{
			width(200)
			labelwidth(50)
		}
	]
	
	scrollbox(team)
	[
		exec
		{
			width(200)
			labelwidth(50)
		}
	]
	
	vcontainer
	{
		checkbox(texureScroll)
		[
			exec
			{
				width(280)
				labelwidth(180)
			}
		]
		floatedit(texureScrollScale, 0.05, 1)
		[
			exec
			{
				tooltip("This is used to change the speed at which the tank treads scroll")
				width(280)
				labelwidth(150)
			}
		]
		checkbox(steerWheels)
		[
			exec
			{
				width(280)
				labelwidth(180)
			}
		]
		floatedit(wheelRotRate, 0.05, 1)
		[
			exec
			{
				tooltip("How fast the wheels rotate, set to the wheel radius or set to 0 if playing an animation in script.")
				width(280)
				labelwidth(150)
			}
		]
		floatedit(extraWheelRotScale, 0.05, 1)
		[
			exec
			{
				tooltip("How fast the extra wheels rotate relative to the normal wheelRotRate.")
				width(280)
				labelwidth(150)
			}
		]
		vcontainer
		{
			hcontainer
			{
				edit(extraWheelLeft1)
				[
					exec
					{
						width(350)
						labelwidth(150)
					}
				]
				edit(extraWheelRight1)
				[
					exec
					{
						width(350)
						labelwidth(150)
					}
				]
			}
			hcontainer
			{
				edit(extraWheelLeft2)
				[
					exec
					{
						width(350)
						labelwidth(150)
					}
				]
				edit(extraWheelRight2)
				[
					exec
					{
						width(350)
						labelwidth(150)
					}
				]
			}
		}
		
		checkbox(quadBarrel)
		[
			exec
			{
				width(280)
				labelwidth(180)
			}
		]
		checkbox(addToCompass)
		[
			exec
			{
				label("Show On Compass")
				width(280)
				labelwidth(180)
			}
		]
		checkbox(addToCompassEnemy)
		[
			exec
			{
				label("Show On Enemy Compass")
				width(280)
				labelwidth(180)
			}
		]
		fileedit(compassIcon)
		[
			exec
			{
				label("Compass Icon")
				reldir("raw/")
				width(500)
				labelwidth(180)
			}
		]
	}
	[
		exec
		{
			groupBox("Visuals")
		}
	]
	
	vcontainer
	{
		hcontainer
		{
			edit(mod0)
			[
			  exec
			  {
				label("Model 1")
				width(450)
				labelwidth(80)
			  }
			]	
			edit(tag0)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}	
		hcontainer
		{
			edit(mod1)
			[
			  exec
			  {
				label("Model 2")
				width(450)
				labelwidth(80)
			  }
			]	
			edit(tag1)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}
		hcontainer
		{

			edit(mod2)
			[
			  exec
			  {
				label("Model 3")
				width(450)
				labelwidth(80)
			  }
			]	
			edit(tag2)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}	
		hcontainer
		{

			edit(mod3)
			[
			  exec
			  {
				label("Model 4")
				width(450)
				labelwidth(80)
			  }
			]	
			edit(tag3)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}	
		hcontainer
		{

			edit(dmod0)
			[
			  exec
			  {
				label("Destroyed Model 1")
				width(450)
				labelwidth(130)
			  }
			]	
			edit(dtag0)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}
		hcontainer
		{

			edit(dmod1)
			[
			  exec
			  {
				label("Destroyed Model 2")
				width(450)
				labelwidth(130)
			  }
			]	
			edit(dtag1)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}
		hcontainer
		{

			edit(dmod2)
			[
			  exec
			  {
				label("Destroyed Model 3")
				width(450)
				labelwidth(130)
			  }
			]	
			edit(dtag2)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}	
		hcontainer
		{

			edit(dmod3)
			[
			  exec
			  {
				label("Destroyed Model 4")
				width(450)
				labelwidth(130)
			  }
			]	
			edit(dtag3)
			[
				exec
				{
					label("Tag")
					width(300)
					labelwidth(50)
				}
			]						
		}												
	}	
	[
		exec
		{
			groupBox("Attachments", mod0 != "" )
		}
	]
	
	vcontainer
	{
		hcontainer
		{
			checkbox(bulletDamage)
			[
				exec
				{
					width(280)
					labelwidth(180)
				}
			]
			
			checkbox(armorPiercingDamage)
			[
				exec
				{
					width(280)
					labelwidth(180)
				}
			]
		}
		
		hcontainer
		{
			checkbox(grenadeDamage)
			[
				exec
				{
					width(280)
					labelwidth(180)
				}
			]
			checkbox( heavyExplosiveDamage )
			[
				exec
				{
					width(280)
					labelwidth(180)
				}
			]
		}
		hcontainer
		{
			checkbox(projectileDamage)
			[
				exec
				{
					width(280)
					labelwidth(180)
				}
			]
			
			checkbox(projectileSplashDamage)
			[
				exec
				{
					width(280)
					labelwidth(180)
				}
			]
		}
	}
	[
		exec
		{
			groupBox("Damage Settings")
		}
	]
	
	vcontainer
	{
		hcontainer
		{
			floatedit(maxSpeed, 0.05, 1)
			[
				exec
				{
					tooltip("Max speed in MPH")
					width(280)
					labelwidth(150)
				}
			]
			
			floatedit(accel, 0.05, 1)
			[
				exec
				{
					tooltip("For scripted helicopters this is used for determining orientation. Set it to high value for helicopter to fly leveled under regular accelerations")
					width(280)
					labelwidth(150)
				}
			]
		}
		
		hcontainer
		{
			floatedit(rotRate, 0.05, 1)
			[
				exec
				{
					tooltip("Max rotational rate of this vehicle")
					width(280)
					labelwidth(150)
				}
			]
			
			floatedit(rotAccel, 0.05, 1)
			[
				exec
				{
					tooltip("This is only used for vehicles using radiant paths")
					width(280)
					labelwidth(150)
				}
			]
		}
		
		hcontainer
		{
			floatedit(maxBodyPitch, 0.05, 1)
			[
				exec
				{
					tooltip("Max jolt pitch. Should be 0 for helicopters")
					width(280)
					labelwidth(150)
				}
			]
			
			floatedit(maxBodyRoll, 0.05, 1)
			[
				exec
				{
					tooltip("Max jolt roll. Should be 0 for helicopters")
					width(280)
					labelwidth(150)
				}
			]
		}
		
		floatedit(suspensionTravel, 0.05, 1)
		[
			exec
			{
				width(280)
				labelwidth(150)
			}
		]
			
		hcontainer
		{
			floatedit(collisionDamage, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
				}
			]
			
			floatedit(collisionSpeed, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
				}
			]
		}

		checkbox(isDrivable)
		[
			exec
			{
				width(280)
				labelwidth(150)
			}
		]

		checkbox(remoteControl)
		[
			exec
			{
				width(280)
				labelwidth(150)
			}
		]	

		spinedit(numberOfSeats, 1, 1)
		[
			exec
			{
				label("Number of Player Positions")
				width(280)
				labelwidth(150)
				tooltip("Total number of usable player positions in the vehicle (including gunners).")
			}
		]
		spinedit(numberOfGunners, 1, 1)
		[
			exec
			{
				label("Number of Gunners")
				width(280)
				labelwidth(150)
				tooltip("Total number of usable player seats with a mounted gun in the vehicle.")
			}
		]
		spinedit(driverControlledGunPos, 1, 1)
		[
			exec
			{
				label("Driver 2nd Turret")
				labelwidth(150)
				tooltip("Driver can fire this gunner position with the grenade button, in addition to controlling the main gun. -1 for none.")
				width(280)
			}
		]
		hcontainer
		{
			spinedit(seatSwitchOrder1, 1, 1)
			[
				exec
				{
					label("")
					width(100)
					labelwidth(30)
				}
			]
			spinedit(seatSwitchOrder2, 1, 1)
			[
				exec
				{
					label("")
					width(100)
					labelwidth(30)
				}
			]
			spinedit(seatSwitchOrder3, 1, 1)
			[
				exec
				{
					label("")
					width(100)
					labelwidth(30)
				}
			]
			spinedit(seatSwitchOrder4, 1, 1)
			[
				exec
				{
					label("")
					width(100)
					labelwidth(30)
				}
			]
			spinedit(seatSwitchOrder5, 1, 1)
			[
				exec
				{
					label("")
					width(100)
					labelwidth(30)
				}
			]
		}
		[
			exec
			{
				groupBox("Seat Switch Order")
			}
		]
	}
	[
		exec
		{
			groupBox("Movement and Player Settings")
		}
	]
	
	vcontainer
	{
		scrollbox(boostMode)
		[
			exec
			{
				label("Mode")
				width(200)
				labelwidth(50)
			}
		]
		floatedit(boostSpeedIncrease, 0.05, 1)
		[
			exec
			{
				tooltip("Amount to increase the maximum speed of the vehicle while boosting")
				width(280)
				labelwidth(150)
			}
		]		
		floatedit(boostAccelMultiplier, 0.05, 1)
		[
			exec
			{
				tooltip("Amount to increase the acceleration of the vehicle while boosting")
				width(280)
				labelwidth(150)
			}
		]		
		floatedit(boostInterval, 0.05, 1)
		[
			exec
			{
				tooltip("How long between boosts")
				width(280)
				labelwidth(150)
			}
		]	
		floatedit(boostDuration, 0.05, 1)
		[
			exec
			{
				tooltip("How long a boost can last")
				width(280)
				labelwidth(150)
			}
		]
		floatedit(boostFrictionMultiplier, 0.25, 1)
		[
			exec
			{
				tooltip("Multiplier applied to the final friction while boosting")
				label("Friction multiplier")
				width(280)
				labelwidth(150)
			}
		]
		floatedit(boostContinuousRegenCooldown, 0.25, 1)
		[
			exec
			{
				tooltip("Amount of time boost must not be used before regenerating duration")
				label("Continuous-mode regen cooldown")
				width(280)
				labelwidth(200)
			}
		]
		floatedit(boostContinuousRegenAmount, 0.25, 1)
		[
			exec
			{
				tooltip("Amount of duration regenerated every second")
				label("Continuous-mode regen per second")
				width(300)
				labelwidth(240)
			}
		]		
	}	
	[
		exec
		{
			groupBox("Boost Settings")
		}
	]
	
	vcontainer
	{
		floatedit(heliCollisionScalar, 1, 10)
		[
			exec
			{
				label("Heli Collision Scalar")
  			tooltip("The collision is based of the radius of the model wheels (dont ask).  This allows you to increase it.")
			}
		]
	}
	[
		exec
		{
			groupBox("Helicopter")
			visible( type == "helicopter" )
		}
	]
	vcontainer
	{
		floatedit(viewPitchOffset, 1, 10)
		[
			exec
			{
				label("View Offset Pitch")
  			tooltip("Pitch offset from 0 for the default view")
			}
		]
		hcontainer
		{
			floatedit(tiltSpeedPitch, 1, 10)
			[
				exec
				{
					label("Tilt Speed Pitch")
	  			tooltip("The rate at which the player helicopter\'s tilt responds")
 				}
			]
			floatedit(tiltSpeedRoll, 1, 10)
			[
				exec
				{
					label("Tilt Speed Roll")
	  			tooltip("The rate at which the player helicopter\'s tilt responds")
				}
			]
		}
		hcontainer
		{
			floatedit(tiltFromVelocityPitch, 1, 10)
			[
				exec
				{
					label("From Velocity Pitch")
	  			tooltip("The amount of tilt caused by the current velocity")
 				}
			]
			floatedit(tiltFromVelocityRoll, 1, 10)
			[
				exec
				{
					label("From Velocity Roll")
	  			tooltip("The amount of tilt caused by the current velocity")
				}
			]
		}
		hcontainer
		{
			floatedit(tiltFromAccelerationPitch, 1, 10)
			[
				exec
				{
					label("From Accel Pitch")
	  			tooltip("The amount of tilt caused by acceleration")
 				}
			]
			floatedit(tiltFromAccelerationRoll, 1, 10)
			[
				exec
				{
					label("From Accel Roll")
	  			tooltip("The amount of tilt caused by acceleration")
				}
			]
		}
		hcontainer
		{
			floatedit(tiltFromDecelerationPitch, 1, 10)
			[
				exec
				{
					label("From Decel Pitch")
	  			tooltip("The amount of tilt caused by deceleration")
 				}
			]
			floatedit(tiltFromDecelerationRoll, 1, 10)
			[
				exec
				{
					label("From Decel Roll")
	  			tooltip("The amount of tilt caused by deceleration")
				}
			]
		}
	}
	[
		exec
		{
			groupBox("Helicopter Tilt")
			visible( type == "helicopter" )
		}
	]
	vcontainer
	{
		scrollbox(cameraMode)
		[
			exec
			{
				label("Mode")
				width(200)
				labelwidth(50)
				tooltip("CHASE - is like a balloon on a string following the vehicle. FIRST - first person. VIEW - halo warthog style. STRAFE - halo tank or WAW tank style. HORSE - . OLDTANK - left stick up moves tank in forward direction of tank")
			}
		]
	
		checkbox(autoRecenterOnAccel)
		[
			exec
			{
				label("Auto Center Camera on Accel")
				width(280)
				labelwidth(250)
				tooltip("Does not apply to STRAFE or VIEW camera modes, also see vehRecenterDelay dvar")
			}
		]
		checkbox(thirdPersonDriver)
		[
			exec
			{
				label("Third Person Camera for Driver")
				width(280)
				labelwidth(250)
			}
		]

		floatedit(viewInfluence, 0.01, 0.1)
		[
			exec
			{
				label("View Influence")
 				width(280)
				labelwidth(180)
	 			tooltip("The influence on the view angles from being in a vehicle")
			}
		]

		floatedit(cameraFOV, 1, 10)
		[
			exec
			{
				label("FOV")
				width(280)
				labelwidth(180)
				tooltip("Set to 0 for default.  Anything below 15 will be ignored.")
			}
		]
		floatedit(thirdPersonCameraRange, 1, 10)
		[
			exec
			{
				label("Third Person Range")
				width(280)
				labelwidth(180)
			}
		]
		hcontainer
		{
			floatedit(thirdPersonCameraHeightMin, 1, 10)
			[
				exec
				{
					label("Third Person Height:  Min")
					width(280)
					labelwidth(180)
				}
			]
			floatedit(thirdPersonCameraHeight, 1, 10)
			[
				exec
				{
					label("Max")
					width(180)
					labelwidth(60)
				}
			]
		}
		hcontainer
		{
			floatedit(thirdPersonCameraPitchMin, 1, 10)
			[
				exec
				{
					label("Third Person Pitch:    Min")
					width(280)
					labelwidth(180)
				}
			]
			floatedit(thirdPersonCameraPitch, 1, 10)
			[
				exec
				{
					label("Max")
					width(180)
					labelwidth(60)
				}
			]
		}
		floatedit(thirdPersonCameraMinPitchClamp, 1, 10)
		[
			exec
			{
				label("Pitch Minimum Clamp")
				width(280)
				labelwidth(180)
				tooltip("Used to prevent the camera from being able to pitch up into the vehicle")
			}
		]
		floatedit(thirdPersonCameraMaxPitchClamp, 1, 10)
		[
			exec
			{
				label("Pitch Maximum Clamp")
				width(280)
				labelwidth(180)
				tooltip("Used to prevent the camera from being able to pitch up into the vehicle")
			}
		]
		checkbox(cameraAlwaysAutoCenter)
		[
			exec
			{
				label("Third Person Always Auto Center")
				width(280)
				labelwidth(250)
			}
		]
		hcontainer
		{
			floatedit(cameraAutoCenterLerpRate, 1, 10)
			[
				exec
				{
					label("Auto Center Rate")
					width(280)
					labelwidth(160)
				}
			]
			floatedit(cameraAutoCenterMaxLerpRate, 1, 10)
			[
				exec
				{
					label("Auto Center Max Rate")
					labelwidth(160)
				}
			]
		}
		hcontainer
		{
			floatedit(thirdPersonCameraSpringDistance, 1, 256)
			[
				exec
				{
					tooltip("Additional distance the camera will spring back based on vehicle speed")
					label("Third person spring distance")
					width(280)
					labelwidth(210)
				}
			]
			floatedit(thirdPersonCameraSpringTime, 0.1, 10)
			[
				exec
				{
					tooltip("Time it takes for the spring to reach its full distance")
					label("Third person spring time")
					width(280)
					labelwidth(180)
				}
			]
		}
		floatedit(thirdPersonCameraHandbrakeTurnRateInc, 1, 10)
		[
			exec
			{
				tooltip("Camera turn rate speed increase that gets added onto the value from the turret weapon when the handbrake is pulled")
				label("Handbrake Turn Rate Inc")
				width(280)
				labelwidth(180)
			}
		]

	}
	[
		exec
		{
			groupBox("Camera Settings")
			visible( isDrivable )
		}
	]

	vcontainer
	{
		hcontainer
		{
			floatedit(killcamDist, 1, 10)
			[
				exec
				{
					label("Distance")
					width(200)
					labelwidth(100)
					tooltip("Kill camera distance from vehicle")
				}
			]
			floatedit(killcamZDist, 1, 10)
			[
				exec
				{
					label("Distance Above")
					width(220)
					labelwidth(120)
					tooltip("Kill camera distance above vehicle")
				}
			]
		}
		hcontainer
		{
			floatedit(killcamFOV, 1, 10)
			[
				exec
				{
					label("FOV")
					width(200)
					labelwidth(100)
					tooltip("Kill camera field of view")
				}
			]
		checkbox(killcamCollision)
		[
			exec
			{
				label("Collision")
				width(200)
				labelwidth(100)
				tooltip("Do collision on the killcam to make sure nothing is between the camera and target")
			}
		]
		}
		hcontainer
		{
			floatedit(killcamMinDist, 1, 10)
			[
				exec
				{
					label("Min Distance")
					width(200)
					labelwidth(100)
					tooltip("Minimum distance between vehicle and target allowed")
				}
			]
			floatedit(killcamZTargetOffset, 1, 10)
			[
				exec
				{
					label("Target Offset")
					width(220)
					labelwidth(120)
					tooltip("Offset above or below the target to focus on")
				}
			]
		}
		hcontainer
		{
			floatedit(killcamNearBlur, 0.1, 1)
			[
				exec
				{
					label("Near Blur")
					width(200)
					labelwidth(100)
					tooltip("Radius of the gaussian blur in pixels at 640x480")
				}
			]
			floatedit(killcamNearBlurStart, 1, 10)
			[
				exec
				{
					label("Start")
					width(150)
					labelwidth(50)
					tooltip("Start distance of blur from camera")
				}
			]
			floatedit(killcamNearBlurEnd, 1, 10)
			[
				exec
				{
					label("End")
					width(150)
					labelwidth(50)
					tooltip("End distance of blur from camera")
				}
			]
		}
		hcontainer
		{
			floatedit(killcamFarBlur, 0.1, 1)
			[
				exec
				{
					label("Far Blur")
					width(200)
					labelwidth(100)
					tooltip("Radius of the gaussian blur in pixels at 640x480")
				}
			]
			floatedit(killcamFarBlurStart, 1, 10)
			[
				exec
				{
					label("Start")
					width(150)
					labelwidth(50)
					tooltip("Start distance of blur from camera")
				}
			]
			floatedit(killcamFarBlurEnd, 1, 10)
			[
				exec
				{
					label("End")
					width(150)
					labelwidth(50)
					tooltip("End distance of blur from camera")
				}
			]
		}

	}
	[
		exec
		{
			groupBox("Killcam Settings")
		}
	]

	vcontainer
	{
		hcontainer
		{
			floatedit(enterRadiusDriver, 1, 10)
			[
				exec
				{
					label("Left & Driver")
				}
			]
			floatedit(enterRadiusGunner1, 1, 10)
			[
				exec
				{
					label("Right & Gunner1")
				}
			]
			floatedit(enterRadiusGunner2, 1, 10)
			[
				exec
				{
					label("Rear & Gunner2")
				}
			]
		}
		hcontainer
		{
			floatedit(enterRadiusGunner3, 1, 10)
			[
				exec
				{
					label("Gunner3")
				}
			]
			floatedit(enterRadiusGunner4, 1, 10)
			[
				exec
				{
					label("Gunner4")
				}
			]
		}
	}
	[
		exec
		{
			groupBox("Player Use Radius")
		}
	]
	
	vcontainer
	{
		edit(turretWeapon)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
		floatedit(turretRotRate, 0.05, 1)
		[
			exec
			{
				width(280)
				labelwidth(150)
			}
		]
		hcontainer
		{
			floatedit(turretHorizSpanLeft, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
				}
			]
			floatedit(turretHorizSpanRight, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
				}
			]
		}
		
		hcontainer
		{
			floatedit(turretVertSpanUp, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
				}
			]
			floatedit(turretVertSpanDown, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
				}
			]
		}
		checkbox(turretClampPlayerView)
		[
			exec
			{
				width(280)
				labelwidth(180)
			}
		]
    edit(turretTag1)
    [
      exec
      {
        width(350)
        labelwidth(150)
        tooltip("Additional tag to fire main turret from")
      }
    ]
    edit(turretTag2)
    [
      exec
      {
        width(350)
        labelwidth(150)
        tooltip("Additional tag to fire main turret from")
      }
    ]
    edit(turretTag3)
    [
      exec
      {
        width(350)
        labelwidth(150)
        tooltip("Additional tag to fire main turret from")
      }
    ]
    edit(turretTag4)
    [
      exec
      {
        width(350)
        labelwidth(150)
        tooltip("Additional tag to fire main turret from")
      }
    ]
		hcontainer
		{
			floatedit(tracerOffsetForward, 1, 10)
			[
				exec
				{
					label("Tracer Offset Forward")
	  			tooltip("Offset from the tag_flash to be used for the first person view")
 				}
			]
			floatedit(tracerOffsetUp, 1, 10)
			[
				exec
				{
					label("Tracer Offset Up")
	  			tooltip("Offset from the tag_flash to be used for the first person view")
				}
			]
		}
	}
	[
		exec
		{
			groupBox("Main Turret Weapon")
		}
	]

  vcontainer
	{
    edit(secTurretType)
		[
			exec
			{
				width(350)
				labelwidth(150)
        label("Type")
			}
		]
    edit(secTurretTag)
		[
			exec
			{
				width(350)
				labelwidth(150)
        label("Tag")
			}
		]
    fileedit(secTurretModel)
    [
      exec
      {
        label("Model")
        reldir("raw/xmodel/")
        width(600)
        labelwidth(150)
      }
    ]
    checkbox(secTurretAiControlled)
		[
			exec
			{
				width(250)
				labelwidth(150)
				label("AiControlled")
			}
		]
	}
	[
		exec
		{
			groupBox("Secondary Scripted Turret Weapon", secTurretType != "" )
		}
	]
	
	vcontainer
	{
		edit(gunnerWeapon)
		[
			exec
			{
				width(350)
				labelwidth(150)
				label("Gunner1")
				tooltip("Uses tags: tag_gunner_turret1, tag_gunner_barrel1, tag_flash_gunner1")
			}
		]
		edit(gunnerWeapon1)
		[
			exec
			{
				width(350)
				labelwidth(150)
				label("Gunner2")
				tooltip("Uses tags: tag_gunner_turret2, tag_gunner_barrel2, tag_flash_gunner2")
			}
		]
		edit(gunnerWeapon2)
		[
			exec
			{
				width(350)
				labelwidth(150)
				label("Gunner3")
				tooltip("Uses tags: tag_gunner_turret3, tag_gunner_barrel3, tag_flash_gunner3")
			}
		]
		edit(gunnerWeapon3)
		[
			exec
			{
				width(350)
				labelwidth(150)
				label("Gunner4")
				tooltip("Uses tags: tag_gunner_turret4, tag_gunner_barrel4, tag_flash_gunner4")
			}
		]

		floatedit(gunnerRotRate, 0.05, 1)
		[
			exec
			{
				tooltip("This is only used for Script control of this gun and not the player, player uses maxHorTurnSpeed in the turret weapon gdt")
				width(280)
				labelwidth(150)
			}
		]
	}
	[
		exec
		{
			groupBox("Gunner Weapons")
		}
	]
	
	vcontainer
	{
		hcontainer
		{
			floatedit(passenger1HorizSpanLeft, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger1 Left")
				}
			]
			floatedit(passenger1HorizSpanRight, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger1 Right")
				}
			]
		}
		
		hcontainer
		{
			floatedit(passenger1VertSpanUp, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger1 Up")
				}
			]
			floatedit(passenger1VertSpanDown, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger1 Down")
				}
			]
		}
		hcontainer
		{
			floatedit(passenger2HorizSpanLeft, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger2 Left")
				}
			]
			floatedit(passenger2HorizSpanRight, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger2 Right")
				}
			]
		}
		
		hcontainer
		{
			floatedit(passenger2VertSpanUp, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger2 Up")
				}
			]
			floatedit(passenger2VertSpanDown, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger2 Down")
				}
			]
		}
		hcontainer
		{
			floatedit(passenger3HorizSpanLeft, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger3 Left")
				}
			]
			floatedit(passenger3HorizSpanRight, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger3 Right")
				}
			]
		}
		
		hcontainer
		{
			floatedit(passenger3VertSpanUp, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger3 Up")
				}
			]
			floatedit(passenger3VertSpanDown, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger3 Down")
				}
			]
		}
		hcontainer
		{
			floatedit(passenger4HorizSpanLeft, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger4 Left")
				}
			]
			floatedit(passenger4HorizSpanRight, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger4 Right")
				}
			]
		}
		
		hcontainer
		{
			floatedit(passenger4VertSpanUp, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger4 Up")
				}
			]
			floatedit(passenger4VertSpanDown, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger4 Down")
				}
			]
		}
		hcontainer
		{
			floatedit(passenger5HorizSpanLeft, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger5 Left")
				}
			]
			floatedit(passenger5HorizSpanRight, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger5 Right")
				}
			]
		}
		
		hcontainer
		{
			floatedit(passenger5VertSpanUp, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger5 Up")
				}
			]
			floatedit(passenger5VertSpanDown, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger5 Down")
				}
			]
		}
		hcontainer
		{
			floatedit(passenger6HorizSpanLeft, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger6 Left")
				}
			]
			floatedit(passenger6HorizSpanRight, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger6 Right")
				}
			]
		}
		
		hcontainer
		{
			floatedit(passenger6VertSpanUp, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger6 Up")
				}
			]
			floatedit(passenger6VertSpanDown, 0.05, 1)
			[
				exec
				{
					width(280)
					labelwidth(150)
					label("Passenger6 Down")
				}
			]
		}
	}
	[
		exec
		{
			groupBox("Passenger View Limit Settings", passenger1HorizSpanLeft != 180 )
		}
	]
	
	vcontainer
	{
		edit(lowIdleSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
		
		edit(lowIdleSndPlyr)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
		
		edit(highIdleSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
	
		edit(lowEngineSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
		
		edit(highEngineSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
		
		edit(turretSpinSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
		
		edit(turretStopSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
		
		floatedit(engineSndSpeed, 0.05, 1)
		[
			exec
			{
				width(280)
				labelwidth(150)
			}
		]
	}
	[
		exec
		{
			groupBox("Engine Sounds")
		}
	]
	
	vcontainer
	{
		edit(wheelRoadNoiseSnd)
		[
			exec
			{
				label("Road Noise Prefix")
				width(350)
				labelwidth(150)
				tooltip("Specifies the prefixt of the per material name. Example 'road' becomes 'road_grass','road_dirt',etc")
			}
		]

		edit(wheelSlidingSnd)
		[
			exec
			{
				label("Sliding Prefix")
				width(350)
				labelwidth(150)
				tooltip("Specifies the prefix of the per material name. Example 'road' becomes 'road_grass','road_dirt',etc")
			}
		]

		edit(wheelPeelingOutSnd)
		[
			exec
			{
				label("Peeling Out Prefix")
				width(350)
				labelwidth(150)
				tooltip("Specifies the prefix of the per material name. Example 'road' becomes 'road_grass','road_dirt',etc")
			}
		]

		hcontainer
		{
			floatedit(skidSpeedMin, 1, 5)
			[
				exec
				{
					label("Sliding Speed Min:")
					width(250)
					labelwidth(150)
					tooltip("Velocity at which a wheel is considered sliding.")
				}
			]
			floatedit(skidSpeedMax, 1, 5)
			[
				exec
				{
					label("Max:")
					width(150)
					labelwidth(50)
					tooltip("Velocity at which a wheel sliding is maximum.")
				}
			]
		}
	}
	[
		exec
		{
			groupBox("Ground Sounds")
		}
	]
	
	vcontainer
	{
		edit(engineModLoopSndPlyr)
		[
			exec
			{
				label("1P Engine Loop")
				width(350)
				labelwidth(150)
			}
		]

		edit(engineModLoopSnd)
		[
			exec
			{
				label("3P Engine Loop")
				width(350)
				labelwidth(150)
			}
		]

		edit(engineModLoopLoadSndPlyr)
		[
			exec
			{
				label("1P Engine Load Loop")
				width(350)
				labelwidth(150)
			}
		]

		edit(engineModLoopLoadSnd)
		[
			exec
			{
				label("3P Engine Load Loop")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(engineModLoopNaturalRPMs, 1, 10)
		[
			exec
			{
				label("Engine Loop RPMs")
				tooltip("The natural RPMs frequence for the engine loop when not modulated by the code (e.g. 2000RPMs).")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(idleRPMs, 1, 10)
		[
			exec
			{
				label("Engine Idle RPMs")
				tooltip("The engine rev RPMs when the throttle is off.  Affects engine loop modulation.")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(idleRPMsMax, 1, 10)
		[
			exec
			{
				label("Engine Idle RPMs Max")
				tooltip("The engine rev RPMs when the idle is off.  Affects engine loop modulation.")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(gear1MinRPMs, 1, 10)
		[
			exec
			{
				label("Gear 1 Min RPMs")
				tooltip("The engine RPMs in gear 1 just as the vehicle starts to move.  Affects engine loop modulation.")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(gear1MaxRPMs, 1, 10)
		[
			exec
			{
				label("Gear 1 Max RPMs")
				tooltip("The engine RPMs in gear 1 at the gear 1-2 transition vehicle speed.  Affects engine loop modulation.")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(gearChangeMPH, 1, 10)
		[
			exec
			{
				tooltip("The vehicle speed at which the engine shifts from gear 1 to gear 2.")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(gear2MinRPMs, 1, 10)
		[
			exec
			{
				label("Gear 2 Min RPMs")
				tooltip("The engine RPMs in gear 2 at the gear 1-2 transition vehicle speed.  Affects engine loop modulation.")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(gear2MaxRPMs, 1, 10)
		[
			exec
			{
				label("Gear 2 Max RPMs")
				tooltip("The engine RPMs in gear 2 at the max vehicle speed, which is editable below.  Affects engine loop modulation.")
				width(350)
				labelwidth(150)
			}
		]

		edit(tankBodyDmgLeftSnd)
		[
			exec
			{
				label("Body Dmg Loop Left")
				width(350)
				labelwidth(150)
			}
		]

		edit(tankBodyDmgRightSnd)
		[
			exec
			{
				label("Body Dmg Loop Right")
				width(350)
				labelwidth(150)
			}
		]
	
		edit(tankGrindLeftSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
	
		edit(tankGrindRightSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
	
		edit(tankGrindLeftDmgSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]
	
		edit(tankGrindRightDmgSnd)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]

		floatedit(treadGrindAttenuation, 0.05, 1)
		[
			exec
			{
				tooltip("Max attenuation level of the left and right tread grinding/squeaking sound.")
				width(350)
				labelwidth(150)
			}
		]

		floatedit(treadDamageLoopHealthRatio, 0.05, 1)
		[
			exec
			{
				tooltip("Amount of health at which the tread squeak switches to the damaged squeak sfx.")
				width(350)
				labelwidth(150)
			}
		]

		spinedit(trackLengthInches, 1, 1)
		[
			exec
			{
				label("Single Track Length")
				width(350)
				labelwidth(150)
				tooltip("The length in inches of a single link in the track of a tracked vehicle.  ( Controls clack rate. )")
			}
		]

		floatedit(clacksCurveDamageStart, 0.05, 1)
		[
			exec
			{
				width(350)
				labelwidth(150)
				tooltip("Min amount of damage at which clacks start dropping out.")
			}
		]

		floatedit(clacksCurveDamageEnd, 0.05, 1)
		[
			exec
			{
				width(350)
				labelwidth(150)
				tooltip("Amount of damage at which max # clacks are omitted.")
			}
		]

		floatedit(clacksCurveMaxOmitted, 0.05, 1)
		[
			exec
			{
				width(350)
				labelwidth(150)
				tooltip("Max percentage of clacks that drop out after clacksCurveDamageEnd.")
			}
		]
			
		edit(tankBoostPerkSndPlyr)
		[
			exec
			{
				label("Boost perk SFX (1-P)")
				width(350)
				labelwidth(150)
				tooltip("SFX the driver hears when speed boost is activated.")
			}
		]
	
		edit(tankBoostPerkSnd)
		[
			exec
			{
				label("Boost perk SFX (3-P)")
				width(350)
				labelwidth(150)
				tooltip("SFX everyone else hears when speed boost is activated.")
			}
		]
	}
	[
		exec
		{
			groupBox("New tank audio", engineModLoopSndPlyr != "" )
		}
	]
	
	scrollbox(animType)
	[
		exec
		{
			width(300)
			labelwidth(150)
		}
	]
	
	edit(animSet)
	[
		exec
		{
			width(350)
			labelwidth(150)
		}
	]
	
	vcontainer
	{
		hcontainer
		{
			floatedit(mantleAngleFront,1,10)
			floatedit(mantleAngleBack,1,10)
		}
		hcontainer
		{
			floatedit(mantleAngleLeft,1,10)
			floatedit(mantleAngleRight,1,10)
		}
	}
	[
		exec
		{
			groupBox("Tank Mantle Angles")
		}
	]

  vcontainer
	{
    hcontainer
		{
			spinedit(healthDefault,1,10)
      [
        exec
        {
          label("HP")
          width(150)
          labelwidth(75)
        }
      ]
			spinedit(healthMin,1,10)
      [
        exec
        {
          label("Min HP")
          width(150)
          labelwidth(75)
        }
      ]
      spinedit(healthMax,1,10)
      [
        exec
        {
          label("Max HP")
          width(150)
          labelwidth(75)
        }
      ]
		}
    floatedit(frontArmor,0.01,0.1)
    [
      exec
      {
        label("Front Armor Regen")
        width(250)
        labelwidth(150)
        tooltip("Regens this much of the damage from attacks to the front")
      }
    ]
    hcontainer
		{
		floatedit(radiusDamageMin,1,10)
      [
        exec
        {
          label("Radius Damage Min")
          tooltip("The amount of damage that will be applied at the edge of the damage radius.")
          width(220)
          labelwidth(165)
        }
      ]
		floatedit(radiusDamageMax,1,10)
      [
        exec
        {
          label("Radius Damage Max")
          tooltip("The amount of damage that will be applied at the center.")
          width(220)
          labelwidth(165)
        }
      ]
      floatedit(radiusDamageRadius,1,10)
      [
        exec
        {
          label("Radius Damage Radius")
          tooltip("Anything inside this radius will take damage when this vehicle explodes.")
          width(220)
          labelwidth(165)
        }
      ]
		}
	}
	[
		exec
		{
			groupBox("Health and Radius Damage")
		}
	]

  vcontainer
	{
    edit(rumbleType)
		[
			exec
			{
				width(375)
				labelwidth(100)
        label("Type")
			}
		]
    hcontainer
		{
      floatedit(rumbleScale,0.01,0.05)
      [
        exec
        {
          label("Scale")
          width(175)
          labelwidth(100)
        }
      ]
      floatedit(rumbleDuration,0.1,0.5)
      [
        exec
        {
          label("Duration")
          width(150)
          labelwidth(75)
        }
      ]
      floatedit(rumbleRadius,1,10)
      [
        exec
        {
          label("Radius")
          width(150)
          labelwidth(75)
        }
      ]
    }
    hcontainer
		{
      floatedit(rumbleBaseTime,0.1,0.5)
      [
        exec
        {
          label("Base Time")
          width(175)
          labelwidth(100)
        }
      ]
      floatedit(rumbleAdditionalTime,0.1,0.5)
      [
        exec
        {
          label("Addtl Time")
          width(150)
          labelwidth(75)
        }
      ]
    }
    edit(shootRumble)
		[
			exec
			{
				width(375)
				labelwidth(100)
        label("Shoot Rumble")
			}
		]
    edit(shootShock)
		[
			exec
			{
				width(375)
				labelwidth(100)
        label("Shoot Shock")
			}
		]
	}
	[
		exec
		{
			groupBox("Rumble")
		}
	]

  vcontainer
	{
    hcontainer
		{
      floatedit(deathQuakeScale,0.01,0.05)
      [
        exec
        {
          label("Scale")
          width(175)
          labelwidth(100)
        }
      ]
      floatedit(deathQuakeDuration,0.1,0.5)
      [
        exec
        {
          label("Duration")
          width(150)
          labelwidth(75)
        }
      ]
      floatedit(deathQuakeRadius,1,10)
      [
        exec
        {
          label("Radius")
          width(150)
          labelwidth(75)
        }
      ]
    }
	}
	[
		exec
		{
			groupBox("Death Quake")
		}
	]

  vcontainer
	{
      fileedit(exhaustFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Name")
        }
      ]
      checkbox(oneExhaust)
      [
        exec
        {
          label("One Exhaust")
          width(150)
          labelwidth(100)
        }
      ] 
	}
	[
		exec
		{
			groupBox("ExhaustFx")
		}
	]

  vcontainer
	{
      fileedit(rotorMainIdleFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Main Idle")
        }
      ]
      fileedit(rotorMainStartFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Main Start")
        }
      ]
      fileedit(rotorMainRunningFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Main Running")
        }
      ]
      fileedit(rotorMainStopFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Main Stop")
        }
      ]
      fileedit(rotorTailIdleFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Tail Idle")
        }
      ]
      fileedit(rotorTailStartFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Tail Start")
        }
      ]
      fileedit(rotorTailRunningFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Tail Running")
        }
      ]
      fileedit(rotorTailStopFx)
      [
        exec
        {
          reldir("raw/fx/")
          width(600)
          labelwidth(150)
          label("Tail Stop")
        }
      ]
	}
	[
		exec
		{
			groupBox("RotorFx", type == "helicopter")
		}
	]

  vcontainer
  {
    fileedit(deathFxName)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Name")
      }
    ]
    edit(deathFxTag)
    [
      exec
      {
        width(600)
        labelwidth(150)
        label("Tag")
      }
    ]
    edit(deathFxSound)
    [
      exec
      {
        width(600)
        labelwidth(150)
        label("Sound")
      }
    ]
  }
  [
    exec
    {
      groupBox("DeathFx")
    }
  ]

  vcontainer
  {
    fileedit(treadFxAsphalt)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Asphalt")
      }
    ]
    fileedit(treadFxBark)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Bark")
      }
    ]
    fileedit(treadFxBrick)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Brick")
      }
    ]
    fileedit(treadFxCarpet)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Carpet")
      }
    ]
    fileedit(treadFxCeramic)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Ceramic")
      }
    ]
    fileedit(treadFxCloth)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Cloth")
      }
    ]
    fileedit(treadFxConcrete)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Concrete")
      }
    ]
    fileedit(treadFxDefault)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Default")
      }
    ]
    fileedit(treadFxDirt)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Dirt")
      }
    ]
    fileedit(treadFxFlesh)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Flesh")
      }
    ]
    fileedit(treadFxFoliage)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Foliage")
      }
    ]
    fileedit(treadFxGlass)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Glass")
      }
    ]
    fileedit(treadFxGrass)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Grass")
      }
    ]
    fileedit(treadFxGravel)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Gravel")
      }
    ]
    fileedit(treadFxIce)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Ice")
      }
    ]
    fileedit(treadFxMetal)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Metal")
      }
    ]
    fileedit(treadFxMud)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Mud")
      }
    ]
    fileedit(treadFxPaintedMetal)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("PaintedMetal")
      }
    ]
    fileedit(treadFxPlaster)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Plaster")
      }
    ]
    fileedit(treadFxRock)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Rock")
      }
    ]
    fileedit(treadFxRubber)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Rubber")
      }
    ]
    fileedit(treadFxSand)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Sand")
      }
    ]
    fileedit(treadFxSnow)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Snow")
      }
    ]
    fileedit(treadFxWater)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Water")
      }
    ]
    fileedit(treadFxWood)
    [
      exec
      {
        reldir("raw/fx/")
        width(600)
        labelwidth(150)
        label("Wood")
      }
    ]
  }
  [
    exec
    {
      groupBox("TreadFx")
    }
  ]
	
	vcontainer
	{
		scrollbox(gasButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(boostButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(reverseBrakeButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(handBrakeButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(attackButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(attackSecondaryButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(moveUpButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(moveDownButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(switchSeatButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(specialAbilityButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(firePickupButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(swapPickupButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		scrollbox(dropDeployableButton)
		[
			exec
			{
				width(350)
				labelwidth(170)
			}
		]
		fileedit(accelGraph)
		[
			exec
			{
				label("Accel Graph")
				tooltip("Graph file for in-game editing of the non-linear acceleration curve.")
				reldir("raw/vehicle/")
				width(350)
			}
		]
		fileedit(steerGraph)
		[
			exec
			{
				label("Steering Graph")
				tooltip("Graph file for in-game editing of the non-linear steering curve.")
				reldir("raw/vehicle/")
				width(350)
			}
		]
		}
	[
		exec
		{
			groupBox("Controller Bindings")
			visible( isDrivable )
		}
	]	
	
	checkbox(noDirectionalDamage)
	[
		exec
		{
			label("No Directional Damage")
			tooltip("Prevents this vehicle from changing damage based on hit direction.")
			width(350)
			labelwidth(150)
		}
	]
	
	checkbox(isNitrous)
	[
		exec
		{
			label("Nitrous Vehicle")
			width(350)
			labelwidth(150)
		}
	]
		
	vcontainer
	{
		checkbox(isFourWheelSteering)
		[
			exec
			{
				width(350)
				labelwidth(150)
			}
		]	
		floatedit(nitrous_steer_angle_max,0.01,0.1)
		[
			exec
			{
				label("max steer angle")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]

		floatedit(nitrous_steer_speed,0.01,0.1)
		[
			exec
			{
				label("steer speed")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]	
		floatedit(nitrous_body_mass,.05,1)
		[
			exec
			{
				label("body mass")
				tooltip("Mass in pounds, this is a video game so tanks weight 1000, do not go higher or we may have floating point problems")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_wheel_radius,.05,1)
		[
			exec
			{
				label("wheel radius")
				tooltip("How big are those rims?")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_susp_adj,.2,1)
		[
			exec
			{
				tooltip("Raise your ride")
				label("susp adj")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_susp_spring_k,.5,2)
		[
			exec
			{
				tooltip("Loosen those springs to get a soft ride")
				label("susp spring k")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_susp_damp_k,.05,1)
		[
			exec
			{
				tooltip("Lighten up the dampening to get some more rocking")
				label("susp damp k")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_susp_hard_limit,1,5)
		[
			exec
			{
				tooltip("Max height the wheels can move up")
				label("susp hard limit")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_susp_min_height,.05,1)
		[
			exec
			{
				tooltip("Min height that the wheels.  Use this to fix the wheels from sagging down too low when in the air")
				label("susp min height")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_damp_hand,.05,1)
		[
			exec
			{
				label("tire damp hand")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_damp_brake,.05,1)
		[
			exec
			{
				tooltip("How fast do you want to brake? wheel friction has a lot to do with this also.")
				label("tire damp brake")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_damp_coast,.05,1)
		[
			exec
			{
				tooltip("How quickly do you want to come to a stop when coasting?")
				label("tire damp coast")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_fric_brake,.05,1)
		[
			exec
			{
				label("tire fric brake")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_fric_hand_brake,.05,1)
		[
			exec
			{
				label("tire fric hand brake")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_fric_fwd,0.01,0.1)
		[
			exec
			{
				label("tire fric fwd")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_fric_side,0.01,0.1)
		[
			exec
			{
				label("tire fric side")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tire_fric_side_max,0.1,0.5)
		[
			exec
			{
				label("tire fric side max")
				tooltip("More friction is applied when the wheel is compress, this will cap it. It helps stabilize the vehicle when hitting bumps and jumps.")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(max_fric_tilt,0.01,0.1)
		[
			exec
			{
				tooltip("Scalar to slide the friction once we are past our max angle")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]		
		floatedit(max_fric_tilt_angle,0.01,0.1)
		[
			exec
			{
				tooltip("Angle at which to start sliding the friction")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]	

		floatedit(nitrous_roll_stability,.05,1)
		[
			exec
			{
				tooltip("This raises/lowers the contact point with the ground to provide more stability")
				label("roll stability")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_roll_resistance,.05,1)
		[
			exec
			{
				tooltip("This setting prevents large forces from flipping the vehicle, torque resistance agains pitch and roll")
				label("roll/pitch resistance")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_yaw_resistance,.05,1)
		[
			exec
			{
				tooltip("This setting prevents large forces from turning the vehicle, kind of like a torque resistance against yaw")
				label("yaw resistance")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_upright_strength,.05,1)
		[
			exec
			{
				tooltip("This setting applies a force to hold the vehicle upright, the more it rolls the stronger the force")
				label("upright strength")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_tilt_fakey,.05,1)
		[
			exec
			{
				tooltip("Want a little more lean when you stop and start?  This scales the wheel springs based on accel/braking")
				label("tilt fakey")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		scrollbox(nitrous_traction_type)
		[
			exec
			{
				label("traction type")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_peel_out_max_speed,.05,1)
		[
			exec
			{
				tooltip("If the vehicle is going below this speed then spin the tires")
				label("peel out max speed")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_reverse_scale,.5,1)
		[
			exec
			{
				tooltip("Scale the max speed by this number when driving backwards")
				label("reverse scale")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(autoHandbrakeMinSpeed,5,10)
		[
			exec
			{
				tooltip("This only applies in the halo or strafe control modes and auto applies the hand brake if making a sharp turn (30') at a speed above this speed")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]	
		hcontainer
		{
			floatedit(nitrous_bbox_min_x,5,10)
			[
				exec
				{
					tooltip("Min X dimension of the inertia box")
					labelwidth(0)
					width(150)
					label("x")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_bbox_min_y,5,10)
			[
				exec
				{
					tooltip("Min Y dimension of the inertia box")
					labelwidth(0)
					width(150)
					label("y")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_bbox_min_z,5,10)
			[
				exec
				{
					tooltip("Min Z dimension of the inertia box")
					labelwidth(0)
					width(150)
					visible( isNitrous )
				}
			]
		}
		[
			exec
			{
				groupBox("Inertia Box Min")
				visible( isNitrous )
			}
		]
		hcontainer
		{
			floatedit(nitrous_bbox_max_x,5,10)
			[
				exec
				{
					tooltip("Max X dimension of the inertia box")
					labelwidth(0)
					width(150)
					label("x")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_bbox_max_y,5,10)
			[
				exec
				{
					tooltip("Max Y dimension of the inertia box")
					labelwidth(0)
					width(150)
					label("y")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_bbox_max_z,5,10)
			[
				exec
				{
					tooltip("Max Z dimension of the inertia box")
					labelwidth(0)
					width(150)
					label("z")
					visible( isNitrous )
				}
			]
		}
		[
			exec
			{
				groupBox("Inertia Box Max")
				visible( isNitrous )
			}
		]
		hcontainer
		{
			floatedit(nitrous_mass_center_offset_x,1,3)
			[
				exec
				{
					labelwidth(0)
					width(150)
					label("x")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_mass_center_offset_y,1,3)
			[
				exec
				{
					labelwidth(0)
					width(150)
					label("y")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_mass_center_offset_z,1,3)
			[
				exec
				{
					labelwidth(0)
					width(150)
					visible( isNitrous )
				}
			]
		}
		[
			exec
			{
				groupBox("Center of Mass Offset")
				visible( isNitrous )
			}
		]
		hcontainer
		{
			floatedit(nitrous_buoyancybox_min_x,5,10)
			[
				exec
				{
					labelwidth(0)
					width(150)
					label("x")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_buoyancybox_min_y,5,10)
			[
				exec
				{
					labelwidth(0)
					width(150)
					label("y")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_buoyancybox_min_z,5,10)
			[
				exec
				{
					labelwidth(0)
					width(150)
					visible( isNitrous )
				}
			]
		}
		[
			exec
			{
				groupBox("Buoyancy Box Min")
				visible( isNitrous )
			}
		]
		hcontainer
		{
			floatedit(nitrous_buoyancybox_max_x,5,10)
			[
				exec
				{
					labelwidth(0)
					width(150)
					label("x")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_buoyancybox_max_y,5,10)
			[
				exec
				{
					labelwidth(0)
					width(150)
					label("y")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_buoyancybox_max_z,5,10)
			[
				exec
				{
					labelwidth(0)
					width(150)
					visible( isNitrous )
				}
			]
		}
		[
			exec
			{
				groupBox("Buoyancy Box Max")
				visible( isNitrous )
			}
		]
		floatedit(nitrous_water_speed_max,.2,1)
		[
			exec
			{
				label("Max Water Speed")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_water_accel_max,.2,1)
		[
			exec
			{
				label("Max Water Accel")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_water_turn_accel,.2,1)
		[
			exec
			{
				label("Water Turn Accel")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_water_turn_speed_max,.2,1)
		[
			exec
			{
				label("Water Max Turn Speed")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_boat_ebrake_power,.2,1)
		[
			exec
			{
				label("EBrake power scale")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_boat_speed_rise,1,3)
		[
			exec
			{
				label("Water Speed Rise")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		floatedit(nitrous_boat_speed_tilt,1,3)
		[
			exec
			{
				label("Water Speed Tilt")
				width(350)
				labelwidth(150)
				visible( isNitrous )
			}
		]
		hcontainer
		{
			floatedit(nitrous_boat_motor_offset_x,.05,1)
			[
				exec
				{
					labelwidth(0)
					width(150)
					visible( isNitrous )
				}
			]
			floatedit(nitrous_boat_motor_offset_y,.05,1)
			[
				exec
				{
					labelwidth(0)
					width(150)
					visible( isNitrous )
				}
			]
			floatedit(nitrous_boat_motor_offset_z,.05,1)
			[
				exec
				{
					labelwidth(0)
					width(150)
					visible( isNitrous )
				}
			]
		}
		[
			exec
			{
				groupBox("Boat Motor Offset")
				visible( isNitrous )
			}
		]
		hcontainer
		{
			floatedit(nitrous_boat_side_fric,.05,.1)
			[
				exec
				{
					width(175)
					labelwidth(100)
					label("Side")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_boat_forward_fric,.05,.1)
			[
				exec
				{
					width(175)
					labelwidth(100)
					label("Forward")
					visible( isNitrous )
				}
			]
			floatedit(nitrous_boat_vertical_fric,.05,.1)
			[
				exec
				{
					width(175)
					labelwidth(100)
					label("Vertical")
					visible( isNitrous )
				}
			]
		}
		[
			exec
			{
				groupBox("Boat Water Friction Scale")
				visible( isNitrous )
			}
		]
	}
	[
		exec
		{
			groupBox("Nitrous Vehicle Parameters")
			visible( isNitrous )
		}
	]	
}
