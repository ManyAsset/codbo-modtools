#name "material"
#dll "pc" "material"
#dll "ps3" "material"
#dll "xenon" "material_xenon"
#dll "wii" "material_wii"
#dll "all" "material_properties"
#source_dir "material_source"
#target_dir "materials/"
#target_dir "images/"
#target_dir "material_properties/"
#file_ext "*"
#version 175

string "material.template" template

enum
{
	"world phong",
	"model phong",
	"weapon phong",
	"model ambient",
	"unlit",
	"unlit decal blend",
	"2d",
	"crosshair",
	"impact mark",
	"effect",
	"distortion",
	"particle cloud",
	"tools",
	"sky",
	"sky noncubemap",
	"sky noncubemap transition",
	"water",
	"ocean",
	"objective",
	"tree canopy",
	"dynamic foliage",
	"cloud",
	"custom",
	"CGFXworld",
	"CGFXmodel",
	"projected decal",
	"rope",
	"impact hole mask",
	"punch thru",
	"cod7 simple model",
  	"cod7 simple world",
	"cod7 basic model",
  	"cod7 basic world",
	"cod7 scroll",
	"cod7 model cloak",
	"cod7 weapon",
	"cod7world water",
	"cod7world emissive",
	"sky layered hdr",
	"ui3d",
	"emblem",
	"extra camera",
	"binoculars",
	"dual blend world",
	"SW4 world",
	"SW4 model",
	"SW4 fullscreen"	
} materialType

enum
{
	"none",
	"clothcharr",
	"eyeball",
	"clothwet",
	"adszscale",
	"tension",
	"caustics"
} materialFeatureType

enum
{
	"none",
	"clothcharr"
} materialFeatureTypeCOD7

enum
{
	"none",
	"caustics"
} materialFeatureType_WorldPhong

// Locale specifications.  Adding a new locale also requires adding a checkbox for it.
// Locale specifications must match the locales in 'locale.txt' exactly, with spaces
// replaced by '_' and with 'locale_' prefixed.
int 0 0 1 locale_blockout
int 0 0 1 locale_test
int 0 0 1 locale_tools
int 0 0 1 locale_vietnam
int 0 0 1 locale_arctic
int 0 0 1 locale_underwater
int 0 0 1 locale_berlin
int 0 0 1 locale_russia
int 0 0 1 locale_cuba
int 0 0 1 locale_china
int 0 0 1 locale_us
int 0 0 1 locale_zombie



// Usage specifications.  Adding a new usage requires changing "usage.txt" as well.
enum
{
	"<not in editor>",
	"blockout",
	"tools",
	"clip",
	"------------------------",
	"door",
	"floor",
	"ceiling",
	"roof",
	"interior wall",
	"interior trim",
	"exterior wall",
	"exterior trim",
	"window",
	"decal",
	"------------------------",
	"foliage",
	"terrain",
	"water",
	"sky"
} usage

enum {
	"<error>",
	"<none>",
	"asphalt",
	"brick",
	"carpet",
	"ceramic",
	"cloth",
	"concrete",
	"dirt",
	"flesh",
	"foliage",
	"glass",
	"grass",
	"gravel",
	"ice",
	"metal",
	"mud",
	"paper",
	"plaster",
	"plastic",
	"rock",
	"rubber",
	"sand",
	"snow",
	"water",
	"wood" | "bark",
	"cushion",
	"fruit",
	"paintedmetal",
	"tallgrass"
} surfaceType

string cgfx_filename
string cgfxTemplate

float 2.5 -1000000000.0 1000000000.0 cg00_x
float 2.5 -1000000000.0 1000000000.0 cg00_y
float 2.5 -1000000000.0 1000000000.0 cg00_z
float 2.5 -1000000000.0 1000000000.0 cg00_w

float 2.5 -1000000000.0 1000000000.0 cg01_x
float 2.5 -1000000000.0 1000000000.0 cg01_y
float 2.5 -1000000000.0 1000000000.0 cg01_z
float 2.5 -1000000000.0 1000000000.0 cg01_w

float 2.5 -1000000000.0 1000000000.0 cg02_x
float 2.5 -1000000000.0 1000000000.0 cg02_y
float 2.5 -1000000000.0 1000000000.0 cg02_z
float 2.5 -1000000000.0 1000000000.0 cg02_w

float 2.5 -1000000000.0 1000000000.0 cg03_x
float 2.5 -1000000000.0 1000000000.0 cg03_y
float 2.5 -1000000000.0 1000000000.0 cg03_z
float 2.5 -1000000000.0 1000000000.0 cg03_w


float 2.5 -1000000000.0 1000000000.0 cg04_x
float 2.5 -1000000000.0 1000000000.0 cg04_y
float 2.5 -1000000000.0 1000000000.0 cg04_z
float 2.5 -1000000000.0 1000000000.0 cg04_w

float 2.5 -1000000000.0 1000000000.0 cg05_x
float 2.5 -1000000000.0 1000000000.0 cg05_y
float 2.5 -1000000000.0 1000000000.0 cg05_z
float 2.5 -1000000000.0 1000000000.0 cg05_w

float 2.5 -1000000000.0 1000000000.0 cg06_x
float 2.5 -1000000000.0 1000000000.0 cg06_y
float 2.5 -1000000000.0 1000000000.0 cg06_z
float 2.5 -1000000000.0 1000000000.0 cg06_w

float 2.5 -1000000000.0 1000000000.0 cg07_x
float 2.5 -1000000000.0 1000000000.0 cg07_y
float 2.5 -1000000000.0 1000000000.0 cg07_z
float 2.5 -1000000000.0 1000000000.0 cg07_w


float 2.5 -1000000000.0 1000000000.0 cg08_x
float 2.5 -1000000000.0 1000000000.0 cg08_y
float 2.5 -1000000000.0 1000000000.0 cg08_z
float 2.5 -1000000000.0 1000000000.0 cg08_w

float 2.5 -1000000000.0 1000000000.0 cg09_x
float 2.5 -1000000000.0 1000000000.0 cg09_y
float 2.5 -1000000000.0 1000000000.0 cg09_z
float 2.5 -1000000000.0 1000000000.0 cg09_w

float 2.5 -1000000000.0 1000000000.0 cg10_x
float 2.5 -1000000000.0 1000000000.0 cg10_y
float 2.5 -1000000000.0 1000000000.0 cg10_z
float 2.5 -1000000000.0 1000000000.0 cg10_w

float 2.5 -1000000000.0 1000000000.0 cg11_x
float 2.5 -1000000000.0 1000000000.0 cg11_y
float 2.5 -1000000000.0 1000000000.0 cg11_z
float 2.5 -1000000000.0 1000000000.0 cg11_w

float 2.5 -1000000000.0 1000000000.0 cg12_x
float 2.5 -1000000000.0 1000000000.0 cg12_y
float 2.5 -1000000000.0 1000000000.0 cg12_z
float 2.5 -1000000000.0 1000000000.0 cg12_w


float 2.5 -1000000000.0 1000000000.0 cg13_x
float 2.5 -1000000000.0 1000000000.0 cg13_y
float 2.5 -1000000000.0 1000000000.0 cg13_z
float 2.5 -1000000000.0 1000000000.0 cg13_w


float 2.5 -1000000000.0 1000000000.0 cg14_x
float 2.5 -1000000000.0 1000000000.0 cg14_y
float 2.5 -1000000000.0 1000000000.0 cg14_z
float 2.5 -1000000000.0 1000000000.0 cg14_w

float 2.5 -1000000000.0 1000000000.0 cg15_x
float 2.5 -1000000000.0 1000000000.0 cg15_y
float 2.5 -1000000000.0 1000000000.0 cg15_z
float 2.5 -1000000000.0 1000000000.0 cg15_w

float 2.5 -1000000000.0 1000000000.0 cg16_x
float 2.5 -1000000000.0 1000000000.0 cg16_y
float 2.5 -1000000000.0 1000000000.0 cg16_z
float 2.5 -1000000000.0 1000000000.0 cg16_w

float 2.5 -1000000000.0 1000000000.0 cg17_x
float 2.5 -1000000000.0 1000000000.0 cg17_y
float 2.5 -1000000000.0 1000000000.0 cg17_z
float 2.5 -1000000000.0 1000000000.0 cg17_w

float 2.5 -1000000000.0 1000000000.0 cg18_x
float 2.5 -1000000000.0 1000000000.0 cg18_y
float 2.5 -1000000000.0 1000000000.0 cg18_z
float 2.5 -1000000000.0 1000000000.0 cg18_w

float 2.5 -1000000000.0 1000000000.0 cg19_x
float 2.5 -1000000000.0 1000000000.0 cg19_y
float 2.5 -1000000000.0 1000000000.0 cg19_z
float 2.5 -1000000000.0 1000000000.0 cg19_w

float 2.5 -1000000000.0 1000000000.0 cg20_x
float 2.5 -1000000000.0 1000000000.0 cg20_y
float 2.5 -1000000000.0 1000000000.0 cg20_z
float 2.5 -1000000000.0 1000000000.0 cg20_w

float 2.5 -1000000000.0 1000000000.0 cg21_x
float 2.5 -1000000000.0 1000000000.0 cg21_y
float 2.5 -1000000000.0 1000000000.0 cg21_z
float 2.5 -1000000000.0 1000000000.0 cg21_w

float 2.5 -1000000000.0 1000000000.0 cg22_x
float 2.5 -1000000000.0 1000000000.0 cg22_y
float 2.5 -1000000000.0 1000000000.0 cg22_z
float 2.5 -1000000000.0 1000000000.0 cg22_w

float 2.5 -1000000000.0 1000000000.0 cg23_x
float 2.5 -1000000000.0 1000000000.0 cg23_y
float 2.5 -1000000000.0 1000000000.0 cg23_z
float 2.5 -1000000000.0 1000000000.0 cg23_w

float 2.5 -1000000000.0 1000000000.0 cg24_x
float 2.5 -1000000000.0 1000000000.0 cg24_y
float 2.5 -1000000000.0 1000000000.0 cg24_z
float 2.5 -1000000000.0 1000000000.0 cg24_w

float 2.5 -1000000000.0 1000000000.0 cg25_x
float 2.5 -1000000000.0 1000000000.0 cg25_y
float 2.5 -1000000000.0 1000000000.0 cg25_z
float 2.5 -1000000000.0 1000000000.0 cg25_w

float 2.5 -1000000000.0 1000000000.0 cg26_x
float 2.5 -1000000000.0 1000000000.0 cg26_y
float 2.5 -1000000000.0 1000000000.0 cg26_z
float 2.5 -1000000000.0 1000000000.0 cg26_w

float 2.5 -1000000000.0 1000000000.0 cg27_x
float 2.5 -1000000000.0 1000000000.0 cg27_y
float 2.5 -1000000000.0 1000000000.0 cg27_z
float 2.5 -1000000000.0 1000000000.0 cg27_w

float 2.5 -1000000000.0 1000000000.0 cg28_x
float 2.5 -1000000000.0 1000000000.0 cg28_y
float 2.5 -1000000000.0 1000000000.0 cg28_z
float 2.5 -1000000000.0 1000000000.0 cg28_w

float 2.5 -1000000000.0 1000000000.0 cg29_x
float 2.5 -1000000000.0 1000000000.0 cg29_y
float 2.5 -1000000000.0 1000000000.0 cg29_z
float 2.5 -1000000000.0 1000000000.0 cg29_w

float 2.5 -1000000000.0 1000000000.0 cg30_x
float 2.5 -1000000000.0 1000000000.0 cg30_y
float 2.5 -1000000000.0 1000000000.0 cg30_z
float 2.5 -1000000000.0 1000000000.0 cg30_w

float 2.5 -1000000000.0 1000000000.0 cg31_x
float 2.5 -1000000000.0 1000000000.0 cg31_y
float 2.5 -1000000000.0 1000000000.0 cg31_z
float 2.5 -1000000000.0 1000000000.0 cg31_w

string colorLabel00
string colorLabel01
string colorLabel02
string colorLabel03
string colorLabel04
string colorLabel05
string colorLabel06
string colorLabel07
string colorLabel08
string colorLabel09
string colorLabel10
string colorLabel11
string colorLabel12
string colorLabel13
string colorLabel14
string colorLabel15

string varLabel00
string varLabel01
string varLabel02
string varLabel03
string varLabel04
string varLabel05
string varLabel06
string varLabel07
string varLabel08
string varLabel09
string varLabel10
string varLabel11
string varLabel12
string varLabel13
string varLabel14
string varLabel15
string varLabel16
string varLabel17
string varLabel18
string varLabel19
string varLabel20
string varLabel21
string varLabel22
string varLabel23
string varLabel24
string varLabel25
string varLabel26
string varLabel27
string varLabel28
string varLabel29
string varLabel30
string varLabel31


string specularRoughnessMap
string specularCorrectionMap
string ambientOcclusionMap
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTileSpecularRoughness
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTileSpecularCorrection
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTileAmbientOcclusion
enum { "<auto compression>*", "Uncompressed" } formatSpecularRoughness
enum { "<auto compression>*", "Uncompressed" } formatSpecularCorrection
enum { "<auto compression>*", "Uncompressed" } formatAmbientOcclusion
int 0 0 1 nopicmipSpecularRoughness
int 0 0 1 nopicmipSpecularCorrection
int 0 0 1 nopicmipAmbientOcclusion

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterSpecularRoughness

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterSpecularCorrection

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterAmbientOcclusion


string colorMap00
string colorMap01
string colorMap02
string colorMap03
string colorMap04
string colorMap05
string colorMap06
string colorMap07
string colorMap08
string colorMap09
string colorMap10
string colorMap11
string colorMap12
string colorMap13
string colorMap14
string colorMap15

enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile00
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile01
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile02
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile03
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile04
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile05
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile06
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile07
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile08
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile09
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile10
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile11
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile12
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile13
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile14
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } texTile15





enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor00

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor01

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor02

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor03

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor04

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor05

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor06

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor07


enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor08

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor09

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor10

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor11

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor12

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor13

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor14

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear",
  	"mip (1x bilinear)",
	"mip (1x trilinear)"
	} filterColor15




int 0 0 1 missileClip
int 0 0 1 bulletClip
int 0 0 1 playerClip
int 0 0 1 aiClip
int 0 0 1 vehicleClip
int 0 0 1 itemClip
int 0 0 1 canShootClip
int 0 0 1 aiSightClip

int 0 0 1 noFallDamage
int 0 0 1 noSteps
int 0 0 1 noImpact
int 0 0 1 noMarks
int 0 0 1 noPenetrate
int 0 0 1 noDrop
int 0 0 1 slick
int 0 0 1 ladder
int 0 0 1 mantleOn
int 0 0 1 mantleOver
int 0 0 1 mount
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat00
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat01
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat02
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat03
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat04
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat05
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat06
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat07
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat08
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat09
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat10
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat11
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat12
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat13
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat14
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } textureFormat15





int 0 0 1 wetnessInvert

int 0 0 1 noLightmap
int 0 0 1 noDynamicLight
int 0 0 1 noCastShadow
int 0 0 1 onlyCastShadow
int 0 0 1 noReceiveDynamicShadow
int 0 0 1 noDraw
int 0 0 1 noFog
int 0 0 1 adsZscaleOn
int 0 0 1 heroLight
int 0 0 1 drawToggle
int 0 0 1 sky
//int 0 0 1 radialNormals

int 0 0 1 nonColliding
int 0 0 1 nonSolid
int 0 0 1 transparent
int 0 0 1 detail
int 0 0 1 structural
int 0 0 1 portal
int 0 0 1 lightPortal
int 0 0 1 lightDemoteHint
int 0 0 1 origin
int 0 0 1 physicsGeom
int 0 0 1 hdrPortal
int 0 0 1 hasEditorMaterial
int 0 0 1 receiveSeeThruDecal

int 0 0 1 zFeather
int 40 0 1024 zFeatherDepth

int 0 -1024 1024 eyeOffsetDepth

int 0 0 1 outdoorOnly
int 0 0 1 notInBoats
int 0 0 1 falloff
float 35.0 0.0 90.0 falloffBeginAngle
float 65.0 0.0 90.0 falloffEndAngle

int 0 0 1 useSpotLight
float 0.0 -100 100 spotLightWeight

int 0 0 1 useParticleCloudVerticalAlign

int 0 0 1 distFalloff
float 200.0 0.0 10000.0 distFalloffBeginDistance
float 10.0 0.0 10000.0 distFalloffEndDistance
color 1 1 1 1 falloffBeginColor
color 0.5 0.5 0.5 0.5 falloffEndColor

int 0 0 1 texScroll
int 0 0 1 subLayerScroll
int 0 0 1 specMapEnable
int 0 0 1 reflectionMapEnable
int 0 0 1 detailMapEnable

float 8 0.125 64 detailScaleX
float 8 0.125 64 detailScaleY
float 1 0 10 detailScaleHeight

float 1.0 0.0 1.0 envMapMin
float 1.0 0.0 1.0 envMapMax
float 1.0 0.05 1.0 envMapExponent

float 0.0 -10.0 10.0 uScroll
float 0.0 -10.0 10.0 vScroll

float 0.0 -10.0 10.0 uScroll00
float 0.0 -10.0 10.0 vScroll00

float 0.0 -10.0 10.0 uScroll01
float 0.0 -10.0 10.0 vScroll01

float 0.06 0.0001 10.0 seethruprlx_height
float 0.1 0.0 1.0 seethruprlx_solidrad
float 12 0 100 seethruprlx_alphapower


int 0 0 1 useLegacyNormalEncoding

color 1 1 1 1 cloudLightColor
color 0.5 0.5 0.5 0.5 cloudDarkColor
color 1.0 0.75 0.5 1.0 cloudLiningColor
float 16.0 1.0 64.0 cloudLiningSize

int 0 0 1 objectiveColorsEnabled
color 0.25 0.15 0.00 1.0 colorObjMin
color 1.00 1.00 0.50 1.0 colorObjMax
float 1.0 0.0 1.0 colorObjMinBaseBlend
float 1.0 0.0 1.0 colorObjMaxBaseBlend

//------------------------------------------------------------------------------------------------------------------------------------------------
// hdr layered sky variables
//------------------------------------------------------------------------------------------------------------------------------------------------
float 0.0 0.0 360.0 skyRotation
float 8000.0 -16000.0 16000.0 skySize

float  8000.0 0.0 10000.0 cloudLayer1Height
float 12288.0 0.0 32768.0 cloudLayer1Distance
float  4096.0 0.0 16384.0 cloudLayer1Feather
float  2048.0 0.0 32768.0 cloudLayer1UScale
float  2048.0 0.0 32768.0 cloudLayer1VScale
float 0.0 -10.0 10.0 cloudLayer1UScroll
float 0.0 -10.0 10.0 cloudLayer1VScroll

float  6000.0 0.0 10000.0 cloudLayer2Height
float 12288.0 0.0 32768.0 cloudLayer2Distance
float  4096.0 0.0 16384.0 cloudLayer2Feather
float  2048.0 0.0 32768.0 cloudLayer2UScale
float  2048.0 0.0 32768.0 cloudLayer2VScale
float 0.0 -10.0 10.0 cloudLayer2UScroll
float 0.0 -10.0 10.0 cloudLayer2VScroll

float 65536.0 0.0 131072.0 cloudMask1UScale
float 65536.0 0.0 131072.0 cloudMask1VScale
float 0.5 -2.0 2.0 cloudMask1UScroll
float 0.5 -2.0 2.0 cloudMask1VScroll

float 65536.0 0.0 131072.0 cloudMask2UScale
float 65536.0 0.0 131072.0 cloudMask2VScale
float 0.5 -2.0 2.0 cloudMask2UScroll
float 0.5 -2.0 2.0 cloudMask2VScroll

float 8.0 0.0 32.0 skyScaleRGB

float 1.0 0.0 1.0 cloudLayer1Blend0
float 1.0 0.0 1.0 cloudLayer2Blend0
float 0.0 0.0 1.0 cloudLayer1Blend1
float 0.0 0.0 1.0 cloudLayer2Blend1



//------------------------------------------------------------------------------------------------------------------------------------------------
// cod7 model cloak variables
//------------------------------------------------------------------------------------------------------------------------------------------------

float 4.0 0.0 32.0 cloakScaleU
float 4.0 0.0 32.0 cloakScaleV
float 4.0 0.0 32.0 cloakDistortionScaleU
float 4.0 0.0 32.0 cloakDistortionScaleV

float 0.015625 0.0 8.0 cloakDistortionTimeScaleU
float 0.25 0.0 4.0 cloakDistortionOffsetScaleU
float 0.015625 0.0 8.0 cloakDistortionTimeScaleV
float 0.25 0.0 4.0 cloakDistortionOffsetScaleV 

float 4.5 0.0 12.0 cloakDistortionAmountX
float 4.5 0.0 12.0 cloakDistortionAmountY

int 0 0 1 alphaTexture
int 0 0 1 cloakingDevice
int 0 0 1 alphaDissolve
int 0 0 1 colorDissolve
int 0 0 1 localSplatter
int 0 0 1 localGlow


int 32 1 256 glowLutX
int 32 1 256 glowLutY
int 32 1 256 glowLutZ
float 0.0625 0.0 20.0 glowCycleRateX

int 32 1 256 colorDissolveLutX
int 32 1 256 colorDissolveLutY
int 32 1 256 colorDissolveLutZ

//------------------------------------------------------------------------------------------------------------------------------------------------
// cod7world water variables
//------------------------------------------------------------------------------------------------------------------------------------------------
float 2048 0 8192 waterNormalTextureScale
float 512 0 4096 waterDetailNormalTextureScale
float 0.25 0 2 waterNormalScale
float 0.25 0 2 waterDetailNormalScale
float 2048 0 8192 waterNormalTextureScaleB
float 512 0 8192 waterDetailNormalTextureScaleB

float 3 0 360 waterNormalScrollAngleA
float 0 0 100 waterNormalScrollSpeedA
float 177 0 360 waterNormalScrollAngleB
float 0 0 100 waterNormalScrollSpeedB
float 7 0 360 waterDetailNormalScrollAngleA
float 0 0 100 waterDetailNormalScrollSpeedA
float 173 0 360 waterDetailNormalScrollAngleB
float 0 0 100 waterDetailNormalScrollSpeedB
float 0 0 1 waterDetailNormalFadeMin
float 0 0 1 waterDetailNormalFadeMax
float 0.75 0 1 waterOpacityAmount
float 0.0625  0.015625 0.5 waterSpecularRoughnessA
float 0.1875  0.015625 0.5 waterSpecularRoughnessB

float 1.0 0.0 1.0 waterSpecularAmount

float 0.145 0.0 1.0 waterNearColorR
float 0.145 0.0 1.0 waterNearColorG
float 0.145 0.0 1.0 waterNearColorB

float 0.145 0.0 1.0 scatterColorR
float 0.195 0.0 1.0 scatterColorG
float 0.145 0.0 1.0 scatterColorB

float 0.145 0.0 1.0 waterFarColorR
float 0.145 0.0 1.0 waterFarColorG
float 0.145 0.0 1.0 waterFarColorB

float 10000 1.0 15000.0 waterFarDistance

float 0 0 1 waterDepthFeather
float 0 0 1 waterShadowAdjust
float 0 0 1 waterRefractionAmount

int 0 0 1 waterThinFilm
float 0.25 0 0.5 waterThinFilmDepth
float 0.05 0 1.0 waterThinFilmAmount 

int 0 0 1 waterCustomReflectionProbe
float 0.0 0.0 10.0 waterCustomReflectionProbeScaleR
float 0.0 0.0 10.0 waterCustomReflectionProbeScaleG
float 0.0 0.0 10.0 waterCustomReflectionProbeScaleB

int 0 0 1 waterOcean
float 1024.0	1.0 16384.0 waterFoamLayer0Scale 
float 1795.0	1.0 16384.0 waterFoamLayer1Scale 
float 3142.0	1.0 16384.0 waterFoamLayer2Scale 
float 5497.0	1.0 16384.0 waterFoamLayer3Scale 

float 25.0		-128.0 128.0 waterFoamLayer0Scroll 
float -29.75	-128.0 128.0 waterFoamLayer1Scroll 
float -35.0625	-128.0 128.0 waterFoamLayer2Scroll
float 38.25		-128.0 128.0 waterFoamLayer3Scroll  

float 0.5	0.1	100.0 waterFoamMin
float 10.0	0.1	100.0 waterFoamMax

int 0 0 1 screenReflection

int 0 0 1 waterVertexGerstnerWaves
float 8192.0 0.0 65536.0 waterBobWaveLength
float 8192.0 0.0 65536.0 waterWeaveWaveLength
float 5.0 0.0 32.0 waterBobAmount
float 5.0 0.0 32.0 waterWeaveAmount
float 0.0 0.0 32.0 waterBobSpeed
float 0.0 0.0 32.0 waterWeaveSpeed

float 0.0 0.0 360.0 waterVertexGerstnerWaveAngle0
float 0.0 0.0 1024.0 waterVertexGerstnerWaveWavelength0
float 0.0 0.0 100.0 waterVertexGerstnerWaveAmplitude0
float 0.0 0.0 6.28319 waterVertexGerstnerWavePhase0
float 0.0 0.0 1.0 waterVertexGerstnerWaveSteepness0
float 0.0 0.0 2.0 waterVertexGerstnerWaveSpeed0
float 0.0 0.0 360.0 waterVertexGerstnerWaveAngle1
float 0.0 0.0 1024.0 waterVertexGerstnerWaveWavelength1
float 0.0 0.0 100.0 waterVertexGerstnerWaveAmplitude1
float 0.0 0.0 6.28319 waterVertexGerstnerWavePhase1
float 0.0 0.0 1.0 waterVertexGerstnerWaveSteepness1
float 0.0 0.0 2.0 waterVertexGerstnerWaveSpeed1
float 0.0 0.0 360.0 waterVertexGerstnerWaveAngle2
float 0.0 0.0 1024.0 waterVertexGerstnerWaveWavelength2
float 0.0 0.0 100.0 waterVertexGerstnerWaveAmplitude2
float 0.0 0.0 6.28319 waterVertexGerstnerWavePhase2
float 0.0 0.0 1.0 waterVertexGerstnerWaveSteepness2
float 0.0 0.0 2.0 waterVertexGerstnerWaveSpeed2
float 0.0 0.0 360.0 waterVertexGerstnerWaveAngle3
float 0.0 0.0 1024.0 waterVertexGerstnerWaveWavelength3
float 0.0 0.0 100.0 waterVertexGerstnerWaveAmplitude3
float 0.0 0.0 6.28319 waterVertexGerstnerWavePhase3
float 0.0 0.0 1.0 waterVertexGerstnerWaveSteepness3
float 0.0 0.0 2.0 waterVertexGerstnerWaveSpeed3

//------------------------------------------------------------------------------------------------------------------------------------------------
// cod7world / model emissve variables
//------------------------------------------------------------------------------------------------------------------------------------------------
int 0 0 1 distanceFieldMask


enum {
	"<default>*",
	"distortion",
	"opaque water",
	"boat hull",
	"opaque ambient",
	"opaque",
	"sky",
	"skybox - sun / moon",
	"skybox - clouds",
	"skybox - horizon",
	"decal - bottom 1",
	"decal - bottom 2",
	"decal - bottom 3",
	"decal - static decal",
	"decal - middle 1",
	"decal - middle 2",
	"decal - middle 3",
	"hair",
	"dynamic water",
	"after dynamic water",
	"decal - weapon impact",
	"decal - top 1",
	"decal - top 2",
	"decal - top 3",
	"multiplicative",
	"banner / curtain",
	"underwater",
	"transparent water",
	"corona",
	"window inside",
	"window outside",
	"before effects - bottom",
	"before effects - middle",
	"before effects - top",
	"blend / additive",
	"effect - auto sort",
	"after effects - bottom",
	"after effects - middle",
	"after effects - top",
	"effects - full res",
	"viewmodel effect"
} sort

string customTemplate
string customString
string ui3d_menuname
int 0 0 5 ui3dWindowId

color 1 1 1 1 colorTint
float 0.2 0 1 specTint_r
float 0.2 0 1 specTint_g
float 0.2 0 1 specTint_b
float 1 0 1 specAmount
float 1 0 500 reflectionProbeAmount


string colorMap
string detailMap
int 0 0 0 occMapEnable
string normalMap
string occMap
string specColorMap
string cosinePowerMap
string alphaMap
string specReflectionMap

int 100 10 100 specColorStrength
int 100 10 100 cosinePowerStrength

enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } tileColor
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } tileNormal
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } tileSpecular
enum { "tile both*", "tile horizontal", "tile vertical", "no tile" } tileOcc

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear" } filterColor

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear" } filterColorDetail

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear" } filterDetail

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear" } filterNormal

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear" } filterSpecular

enum { 	"mip standard (2x bilinear)*" | "<auto filter>*" | "bilinear" | "trilinear" | "anisotropic",
	"mip expensive (4x bilinear)",
	"mip more expensive (2x trilinear)",
	"mip most expensive (4x trilinear)",
	"nomip nearest" | "nearest",
	"nomip bilinear" | "linear" } filterOcc

int 0 0 1 nopicmipColor
int 0 0 1 nopicmipColor00
int 0 0 1 nopicmipColor01
int 0 0 1 nopicmipColor02
int 0 0 1 nopicmipColor03
int 0 0 1 nopicmipColor04
int 0 0 1 nopicmipColor05
int 0 0 1 nopicmipColor06
int 0 0 1 nopicmipColor07
int 0 0 1 nopicmipColor08
int 0 0 1 nopicmipColor09
int 0 0 1 nopicmipColor10
int 0 0 1 nopicmipColor11
int 0 0 1 nopicmipColor12
int 0 0 1 nopicmipColor13
int 0 0 1 nopicmipColor14
int 0 0 1 nopicmipColor15
int 0 0 1 nopicmipColorDetail
int 0 0 1 nopicmipDetail
int 0 0 1 nopicmipNormal
int 0 0 1 nopicmipSpecular


int 0 0 1 noStreamColor
int 0 0 1 noStreamNormal
int 0 0 1 noStreamDetail

float 0 0 65536 tessSize
int 1 1 64 textureAtlasRowCount
int 1 1 64 textureAtlasColumnCount
float 0.5 0 1000 distortionScaleX
float 0.5 0 1000 distortionScaleY
enum {
	"scales distortion strength*",
	"tints distorted pixel color"
} distortionColorBehavior

float -1.98 -100 100 waterScrollX0
float  1.32 -100 100 waterScrollY0
float  4.44 -100 100 waterScrollX1
float -5.18 -100 100 waterScrollY1
float  3.44 -100 100 waterScrollX2
float  3.18 -100 100 waterScrollY2

// Generic water parameters
color 0.19 0.3 0.15 0 waterColor
float 0.05 0 1 waterFeather
float 0 0 1 waterOpacity
float 0.1 0 10 waterRoughness
float 30 0 200 waterRefract
color 0.63 0.77 0.77 0 waterSkyColor
color 0.26 0.27 0.11 0 waterGroundColor
float 10.0 0 100 oceanSunBrightness
float 0.0125 0 1 oceanSunSize

// Ocean-specific parameters.
float 1.0 0 1 oceanFoamIntensity
float 2.0 0 8 oceanFoamOverbright
float 8.0 1 256 oceanFoamRepeat
float 32.0 1 256 oceanBumpRepeat
float 100 1 1000 oceanShoreFeather
float 0.95 0 1 oceanShoreEdgeness
float 0.85 0 1 oceanShoreBrightness
float 5.0 0 10 oceanReflectFuzzyness

int 0 0 1 scorchable
int 0 0 1 marksDirectionFade

enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } formatColor
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } formatColorDetail
enum { "<auto compression>*", "Uncompressed", "Alpha Only", "DXT1", "DXT3", "DXT5" } formatDetail
enum { "<auto compression>*", "Uncompressed", "DXT3", "DXT5" } formatSpecular
enum { "<auto compression>*", "Uncompressed", "DXT1", "DXT3", "DXT5" } formatSpecularDetail
enum { "<auto compression>*", "Uncompressed" } formatNormal


enum { "Replace*", "Blend", "Add", "Multiply", "Screen Add", "Custom" } blendFunc
enum { "Add*", "Subtract", "RevSubtract", "Min", "Max", "Disable" } customBlendOpRgb
enum { "Add*", "Subtract", "RevSubtract", "Min", "Max", "Disable" } customBlendOpAlpha
enum { "One*", "Zero", "SrcColor", "InvSrcColor", "SrcAlpha", "InvSrcAlpha", "DestAlpha", "InvDestAlpha", "DestColor", "InvDestColor" } srcCustomBlendFunc
enum { "One*", "Zero", "SrcColor", "InvSrcColor", "SrcAlpha", "InvSrcAlpha", "DestAlpha", "InvDestAlpha", "DestColor", "InvDestColor" } destCustomBlendFunc
enum { "One*", "Zero", "SrcColor", "InvSrcColor", "SrcAlpha", "InvSrcAlpha", "DestAlpha", "InvDestAlpha", "DestColor", "InvDestColor" } srcCustomBlendFuncAlpha
enum { "One*", "Zero", "SrcColor", "InvSrcColor", "SrcAlpha", "InvSrcAlpha", "DestAlpha", "InvDestAlpha", "DestColor", "InvDestColor" } destCustomBlendFuncAlpha

enum { "Always*", "GE128" } alphaTest
enum { "LessEqual*", "Less", "Equal", "Always", "Disable" } depthTest
enum { "<auto>*", "On", "Off" } depthWrite
enum { "Back*", "Front", "None" } cullFace
enum { "None*", "Static Decal", "Weapon Impact" } polygonOffset

enum { "<none>*", "PC / Xenon" } showAdvancedOptions

enum { "Enable", "Disable" } colorWriteRed
enum { "Enable", "Disable" } colorWriteGreen
enum { "Enable", "Disable" } colorWriteBlue
enum { "Enable", "Disable" } colorWriteAlpha

enum { "Keep", "Zero", "Replace", "IncrSat", "DecrSat", "Invert", "Incr", "Decr" } stencilOpFail1
enum { "Keep", "Zero", "Replace", "IncrSat", "DecrSat", "Invert", "Incr", "Decr" } stencilOpZFail1
enum { "Keep", "Zero", "Replace", "IncrSat", "DecrSat", "Invert", "Incr", "Decr" } stencilOpPass1
enum { "Keep", "Zero", "Replace", "IncrSat", "DecrSat", "Invert", "Incr", "Decr" } stencilOpFail2
enum { "Keep", "Zero", "Replace", "IncrSat", "DecrSat", "Invert", "Incr", "Decr" } stencilOpZFail2
enum { "Keep", "Zero", "Replace", "IncrSat", "DecrSat", "Invert", "Incr", "Decr" } stencilOpPass2

enum { "Always", "Never", "Less", "Equal", "LessEqual", "Greater", "NotEqual", "GreaterEqual" } stencilFunc1
enum { "Always", "Never", "Less", "Equal", "LessEqual", "Greater", "NotEqual", "GreaterEqual" } stencilFunc2

enum { "Disable", "One-sided", "Two-sided" } stencil

enum { "ambient", "phong" } dynamicFoliageLightMethod
float 1 0 1 dynamicFoliageFlexibility
float 0 0 100 dynamicFoliageSunDiffuseMin
float 1 0 100 dynamicFoliageSunDiffuseMax
int 0 0 1 treeCanopyEnableSway
float 0 0 1 treeCanopyMinimumSway
float 0.2 0 1 treeCanopySwayRange
float 0.1 0 1 treeCanopyScaleRotationAngles
float 0.5 0 1 treeCanopyAmbientOcclusion
float 0.7 0 1 treeCanopySpecularRoughness
float 0.5 0 1 treeCanopyLightingAmount
float 0.5 0 1 treeCanopyRadialLighting
color 0.7 0.83 0.36 0 treeCanopyScatterColor

string colorDetailMap
float 8 0.125 64 colorDetailScaleX
float 8 0.125 64 colorDetailScaleY

string specDetailMap
float 8 0.125 64 specDetailScaleX
float 8 0.125 64 specDetailScaleY
int 100 10 100 specDetailStrength

//INSERT_DYNAMIC_VARIABLES

vcontainer
{
	hcontainer
	{
		scrollbox( materialType )
		[
			exec
			{
				tooltip("see wiki page for explanation of material types!")
				width( 300 )
				labelwidth( 100 )
			}
		]
		scrollbox( sort )
		[
			exec
			{
				visible( materialType != "cod7 basic model" && materialType != "cod7 simple model")
				tooltip("see wiki page for explanation of sort settings!")
				width( 300 )
				labelwidth( 55 )
				unsorted()
			}
		]
	}
	hcontainer
	{
		scrollbox( surfaceType )
		[
			exec
			{
				tooltip( "Sets the bullet collision particle for your material." )
				width( 300 )
				labelwidth( 100 )
			}
		]
		scrollbox( usage )
		[
			exec
			{
				tooltip("Sets what filters show this material in Radiant")
				width( 300 )
				labelwidth( 55 )
				unsorted()
			}
		]
	}
	vcontainer
	{
		hcontainer
		{
			checkbox( locale_blockout )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "blockout" )
				}
			]
			checkbox( locale_test )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "test" )
				}
			]
			checkbox( locale_tools )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "tools" )
				}
			]
		}
		hcontainer
		{
			checkbox( locale_vietnam )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "vietnam" )
				}
			]
			checkbox( locale_cuba )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "cuba" )
				}
			]
			checkbox( locale_china )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "china" )
				}
			]
		}
		hcontainer
		{
			checkbox( locale_berlin )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "berlin" )
				}
			]
			checkbox( locale_russia )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "russia" )
				}
			]
			checkbox( locale_us )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "us" )
				}
			]
		}
		hcontainer
		{
			checkbox( locale_arctic )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "arctic" )
				}
			]
			checkbox( locale_underwater )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "underwater" )
				}
			]
			checkbox( locale_zombie )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "zombie" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "world phong" || materialType == "custom" || materialType == "SW4 world" || materialType == "CGFXworld" || materialType == "sky" || materialType == "cod7 simple world" || materialType == "cod7 basic world" || materialType == "cod7 alpha world" || materialType == "cod7 scroll" || materialType == "ui3d" || materialType == "extra camera" || materialType == "unlit" || materialType == "dual blend world" || materialType == "unlit decal blend" )
			groupBox( "Locales (select all appropriate for world materials)" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			scrollbox( blendFunc )
			[
				exec
				{
					tooltip("Transparancy settings, Replace is for most materials, Blend is for standard transparency like glass, multiply is used for grime decals, the rest are mostly for fx")
					unsorted()
					width( 215 )
					labelwidth( 100 )
				}
			]
			scrollbox( cullFace )
			[
				exec
				{
					visible( materialType != "cod7 alpha model" )
					tooltip("Back will only draw outside faces, Front will only draw inside faces, None will draw both.")
					width( 215 )
					labelwidth( 100 )
				}
			]
			scrollbox( polygonOffset )
			[
				exec
				{
					visible( materialType != "cod7 alpha model" )
					tooltip("Only adjust this for decals.")
					width( 265 )
					labelwidth( 100 )
				}
			]
		}
		hcontainer
		{
			scrollbox( customBlendOpRgb )
			[
				exec
				{
					width( 215 )
					label( "blendOp" )
					labelwidth( 100 )
				}
			]
			scrollbox( srcCustomBlendFunc )
			[
				exec
				{
					width( 215 )
					label( "srcBlend" )
					labelwidth( 100 )
				}
			]
			scrollbox( destCustomBlendFunc )
			[
				exec
				{
					width( 215 )
					label( "destBlend" )
					labelwidth( 100 )
				}
			]
		}
		[
			exec
			{
				visible( blendFunc == "Custom" )
			}
		]
		hcontainer
		{
			scrollbox( customBlendOpAlpha )
			[
				exec
				{
					width( 215 )
					label( "separateAlpha" )
					labelwidth( 100 )
				}
			]
			scrollbox( srcCustomBlendFuncAlpha )
			[
				exec
				{
					width( 215 )
					label( "srcBlend" )
					labelwidth( 100 )
				}
			]
			scrollbox( destCustomBlendFuncAlpha )
			[
				exec
				{
					width( 215 )
					label( "destBlend" )
					labelwidth( 100 )
				}
			]
		}
		[
			exec
			{
				visible( blendFunc == "Custom" )
			}
		]
		hcontainer
		{
			scrollbox( alphaTest )
			[
				exec
				{
					tooltip("GE128 = punchout alpha, black and white.  Always = everything else")
					width( 215 )
					labelwidth( 100 )
				}
			]
			scrollbox( depthTest )
			[
				exec
				{
					visible( materialType != "cod7 alpha model" )
					tooltip("adjusts the rendering order of the material.")
					width( 215 )
					labelwidth( 100 )
				}
			]
			scrollbox( depthWrite )
			[
				exec
				{
					visible( materialType != "cod7 alpha model" )
					tooltip("turns z buffer info on or off, leave on default unless you know what you are doing!")
					width( 175 )
					labelwidth( 100 )
				}
			]
			floatedit( tessSize, 32, 256 )
			[
				exec
				{
					width( 125 )
					labelwidth( 65 )
					visible( materialType == "world phong" || materialType == "custom" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType != "sky" && materialType != "binoculars" && materialType != "crosshair" )
			groupBox( "Framebuffer operations" )
		}
	]
	vcontainer
	{
		edit( customTemplate )
		[
			exec
			{
				width( 450 )
				label( "Template" )
				labelwidth( 100 )
			}
		]
		edit( customString )
		[
			exec
			{
				width( 450 )
				label( "String" )
				labelwidth( 100 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "custom" )
			groupBox( "Custom Settings" )
		}
	]
	vcontainer
	{
		spinedit( textureAtlasRowCount, 1, 5 )
		[
			exec
			{
				width( 150 )
				labelwidth( 100 )
				label( "Row Count" )
			}
		]
		spinedit( textureAtlasColumnCount, 1, 5 )
		[
			exec
			{
				width( 150 )
				labelwidth( 100 )
				label( "Column Count" )
			}
		]
	}
	[
		exec
		{
			groupBox( "Texture Atlas Settings" )
			visible( materialType == "effect" || materialType == "distortion" || materialType == "custom" )
		}
	]
	hcontainer
	{
		vcontainer
		{
			floatedit( distortionScaleX, 1, 10 )
			[
				exec
				{
					width( 150 )
					labelwidth( 100 )
					label( "Scale X" )
				}
			]
			floatedit( distortionScaleY, 1, 10 )
			[
				exec
				{
					width( 150 )
					labelwidth( 100 )
					label( "Scale Y" )
				}
			]
		}
		scrollbox( distortionColorBehavior )
		[
			exec
			{
				width( 300 )
				labelwidth( 100 )
				label( "Vertex Color..." )
			}
		]
	}
	[
		exec
		{
			groupBox( "Distortion Settings" )
			visible( materialType == "distortion" || materialType == "custom" )
		}
	]
	vcontainer
	{
		checkbox( falloff )
		[
			exec
			{
				righttext()
				height( 15 )
				label( "Enable" )
			}
		]
		floatedit( falloffBeginAngle, 0, 90 )
		[
			exec
			{
				visible( falloff == 1 )
				width( 370 )
				labelwidth( 310 )
				label( "Opaque Angle (0 is head-on, 90 is side-on)" )
			}
		]
		floatedit( falloffEndAngle, 0, 90 )
		[
			exec
			{
				visible( falloff == 1 )
				width( 370 )
				labelwidth( 310 )
				label( "Invisible Angle (0 is head-on, 90 is side-on)" )
			}
		]
	}
	[
		exec
		{
			groupBox( "God Ray Falloff" )
			visible( materialType == "effect" || materialType == "custom" )
		}
	]
	vcontainer
	{
		checkbox( distFalloff )
		[
			exec
			{
				righttext()
				height( 15 )
				label( "Enable" )
			}
		]
		floatedit( distFalloffBeginDistance, 0, 10000 )
		[
			exec
			{
				visible( distFalloff == 1 )
				width( 370 )
				labelwidth( 310 )
				label( "Opaque Distance" )
			}
		]
		floatedit( distFalloffEndDistance, 0, 10000 )
		[
			exec
			{
				visible( distFalloff == 1 )
				width( 370 )
				labelwidth( 310 )
				label( "Invisible Distance" )
			}
		]
	}
	[
		exec
		{
			groupBox( "Distance (hdrPortal) Falloff" )
			visible( materialType == "custom" )
			visible( hdrPortal == 1 )
		}
	]
	vcontainer
	{
		colorpicker( falloffBeginColor )
		[
			exec
			{
				width( 370 )
				labelwidth( 310 )
				label( "Opaque Color" )
			}
		]
		colorpicker( falloffEndColor )
		[
			exec
			{
				width( 370 )
				labelwidth( 310 )
				label( "Transparent Color" )
			}
		]
	}
	[
		exec
		{
			groupBox( "Falloff Colors" )
			visible( (falloff == 1 || distFalloff == 1) && (materialType == "effect" || materialType == "custom") )
		}
	]
	vcontainer
	{
		checkbox( zFeather )
		[
			exec
			{
				righttext()
				height( 15 )
				label( "Enable" )
			}
		]
		spinedit( zFeatherDepth, 1, 10 )
		[
			exec
			{
				width( 150 )
				labelwidth( 100 )
				label( "Depth" )
			}
		]
	}
	[
		exec
		{
			groupBox( "Z Feathering" )
			visible( materialType == "effect" || materialType == "custom" )
		}
	]
	vcontainer
	{
		spinedit( eyeOffsetDepth, 1, 10 )
		[
			exec
			{
				width( 150 )
				labelwidth( 100 )
				label( "Depth" )
			}
		]
	}
	[
		exec
		{
			groupBox( "Eye Offset" )
			visible( materialType == "effect" || materialType == "custom" )
		}
	]
	vcontainer
	{
		checkbox( outdoorOnly )
		[
			exec
			{
				righttext()
				height( 15 )
				label( "Outdoor Only" )
			}
		]
	}
	[
		exec
		{
			visible( ((materialType == "effect") && zFeather == 1) || materialType == "particle cloud" )
		}
	]
	vcontainer
	{
		checkbox( notInBoats )
		[
			exec
			{
				righttext()
				height( 15 )
				label( "Not in boats" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "effect" || materialType == "distortion" || materialType == "particle cloud" )
		}
	]
	vcontainer
	{
		checkbox( useSpotLight )
		[
			exec
			{
				righttext()
				height( 15 )
				label( "Use spot light" )
			}
		]
		floatedit( spotLightWeight, 0.005, 0.1 )
		[
			exec
			{
				width( 250 )
				labelwidth( 150 )
				label( "Spot light weight" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "effect" || materialType == "particle cloud" )
		}
	]
	vcontainer
	{
		checkbox( useParticleCloudVerticalAlign )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 500 )
				label( "vertical aligned particle cloud" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "particle cloud" )
		}
	]

//-----------------------------------------------------------------------------

//INSERT_DYNAMIC_UI

//-----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////BEGIN CGFX SPECIFIC SECTION////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	fxvcontainer
	{
   		hcontainer
		{
			fxfileedit( cgfx_filename )
			[
				exec
				{
					width( 400 )
					labelwidth( 40 )
     			label( "FX" )
				}
			]
		  fxeditc( cgfxTemplate )
			[
				exec
				{
					width( 250 )
					labelwidth( 80 )
     			label( "Template" )
				}
			]
		}
    hcontainer
		{
  		fxeditb( varLabel00 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     					label( varLabel00 )
				}
			]
			fxfloatedit( cg00_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
					label( "X" )
  					width( 100 )
				}
			]
			fxfloatedit( cg00_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg00_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg00_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel00 != "" )
			}
		]
	  hcontainer
		{
  		fxeditb( varLabel01 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel01 )
				}
			]
			fxfloatedit( cg01_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				       	label( "X" )
				       	width( 100 )
				}
			]
			fxfloatedit( cg01_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg01_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		        fxfloatedit( cg01_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel01 != "" )
			}
		]
		hcontainer
		{
  		fxeditb( varLabel02 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel02 )
				}
			]
			fxfloatedit( cg02_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg02_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg02_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg02_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel02 != "" )
			}
		]
	  hcontainer
		{
		  fxeditb( varLabel03 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel03 )
				}
			]
  			fxfloatedit( cg03_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				 	width( 100 )
				}
			]
			fxfloatedit( cg03_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg03_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  	fxfloatedit( cg03_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel03 != "" )
			}
		]
		hcontainer
		{
   		fxeditb( varLabel04 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel04 )
				}
			]
			fxfloatedit( cg04_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg04_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg04_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg04_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel04 != "" )
			}
		]
	  hcontainer
		{
   		fxeditb( varLabel05 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel05 )
				}
			]
			fxfloatedit( cg05_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg05_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg05_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg05_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel05 != "" )
			}
		]
		hcontainer
		{
   		fxeditb( varLabel06 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel06 )
				}
			]
			fxfloatedit( cg06_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg06_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg06_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg06_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel06 != "" )
			}
		]
    hcontainer
		{
   			fxeditb( varLabel07 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel07 )
				}
			]
			fxfloatedit( cg07_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg07_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg07_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg07_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel07 != "" )
			}
		]
		hcontainer
		{
   		fxeditb( varLabel08 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel08 )
				}
			]

			fxfloatedit( cg08_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg08_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg08_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg08_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel08 != "" )
			}
		]
		hcontainer
		{
   		fxeditb( varLabel09 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel09 )
				}
			]
			fxfloatedit( cg09_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg09_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg09_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		        fxfloatedit( cg09_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel09 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel10 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel10 )
				}
			]
			fxfloatedit( cg10_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg10_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg10_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg10_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel10 != "" )
			}
		]
   	hcontainer
		{
   		fxeditb( varLabel11 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel11 )
				}
			]
			fxfloatedit( cg11_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg11_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg11_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg11_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel11 != "" )
			}
		]
   	hcontainer
		{
   		fxeditb( varLabel12 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel12 )
				}
			]
			fxfloatedit( cg12_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg12_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg12_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg12_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel12 != "" )
			}
		]
   	hcontainer
		{
   		fxeditb( varLabel13 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel13 )
				}
			]
			fxfloatedit( cg13_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg13_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg13_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg13_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel13 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel14 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel14 )
				}
			]
			fxfloatedit( cg14_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg14_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg14_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg14_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel14 != "" )
			}
		]
   	hcontainer
		{
   			fxeditb( varLabel15 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel15 )
				}
			]
			fxfloatedit( cg15_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg15_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg15_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg15_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel15 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel16 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel16 )
				}
			]
			fxfloatedit( cg16_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg16_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg16_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg16_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel16 != "" )
			}
		]
		hcontainer
		{
   		fxeditb( varLabel17 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel17 )
				}
			]
			fxfloatedit( cg17_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg17_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg17_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg17_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel17 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel18 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel18 )
				}
			]
			fxfloatedit( cg18_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg18_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg18_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg18_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel18 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel19 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel19 )
				}
			]
			fxfloatedit( cg19_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg19_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg19_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg19_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel19 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel20 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel20 )
				}
			]
			fxfloatedit( cg20_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg20_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg20_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg20_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel20 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel21 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel21 )
				}
			]
			fxfloatedit( cg21_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg21_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg21_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg21_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel21 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel22 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel22 )
				}
			]
			fxfloatedit( cg22_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg22_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg22_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg22_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel22 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel23 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel23 )
				}
			]
			fxfloatedit( cg23_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg23_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg23_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg23_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel23 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel24 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel24 )
				}
			]
			fxfloatedit( cg24_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg24_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg24_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg24_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel24 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel25 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel25 )
				}
			]
			fxfloatedit( cg25_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				       	label( "X" )
				       	width( 100 )
				}
			]
			fxfloatedit( cg25_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg25_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg25_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel25 != "" )
			}
		]
  	hcontainer
		{
   			fxeditb( varLabel26 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel26 )
				}
			]
			fxfloatedit( cg26_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg26_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg26_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg26_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel26 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel27 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel27 )
				}
			]
			fxfloatedit( cg27_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg27_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg27_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg27_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel27 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel28 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel28 )
				}
			]
			fxfloatedit( cg28_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg28_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg28_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		        fxfloatedit( cg28_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel28 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel29 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel29 )
				}
			]
			fxfloatedit( cg29_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg29_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg29_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg29_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel29 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel30 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel30 )
				}
			]
			fxfloatedit( cg30_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg30_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg30_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg30_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel30 != "" )
			}
		]
  	hcontainer
		{
   		fxeditb( varLabel31 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
     			label( varLabel31 )
				}
			]
			fxfloatedit( cg31_x, 0.01, 0.05 )
			[
				exec
				{
					labelwidth(20)
				  label( "X" )
				  width( 100 )
				}
			]
			fxfloatedit( cg31_y, 0.01, 0.05 )
			[
				exec
				{
					label( "Y" )
					labelwidth( 20 )
					width( 100 )
				}
			]
			fxfloatedit( cg31_z, 0.01, 0.05 )
			[
				exec
				{
					label( "Z" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		  fxfloatedit( cg31_w, 0.01, 0.05 )
			[
				exec
				{
					label( "W" )
					labelwidth( 20 )
					width( 100 )
				}
			]
		}
		[
			exec
			{
				visible( varLabel31 != "" )
			}
		]
  		vcontainer
		{
  			hcontainer
			{
				fxedit( colorLabel00 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
		  		fileedit( colorMap00 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel00 )
					}
				]
		  }
		  hcontainer
		  {
		  scrollbox( texTile00 )
			[
				exec
				{
					width( 330 )
					labelwidth( 230 )
					label( "" )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor00 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
		  scrollbox( textureFormat00 )
			[
				exec
				{
					unsorted()
					width( 170 )
					labelwidth( 0 )
					tooltip( "Changes the compression method for the texture")
				}
			]
		}
	}
		[
			exec
			{
				visible( colorLabel00 != "" )
			}
		]
  	vcontainer
		{
	    hcontainer
			{
 		  	fxedit( colorLabel01 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap01 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel01 )
					}
				]
		  }
		  hcontainer
		  {
 			scrollbox( texTile01 )
			[
				exec
				{
					width( 330 )
					labelwidth( 230 )
					label( "" )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor01 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
      scrollbox( textureFormat01 )
			[
				exec
				{
					unsorted()
					width( 170 )
					labelwidth( 0 )
					tooltip( "Changes the compression method for the texture")
				}
			]
		}
	}
		[
			exec
			{
				visible( colorLabel01 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel02 )
					[
						exec
						{
							width( 210 )
							labelwidth( 0 )
						}
					]
				fileedit( colorMap02 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel02 )
					}
				]
		  }
		  hcontainer
		  {
			scrollbox( texTile02 )
			[
				exec
				{
					width( 330 )
					labelwidth( 230 )
					label( "" )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor02 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
      scrollbox( textureFormat02 )
			[
				exec
				{
					unsorted()
					width( 170 )
					labelwidth( 0 )
					tooltip( "Changes the compression method for the texture")
				}
			]
		}
	}
		[
			exec
			{
				visible( colorLabel02 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel03 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap03 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel03 )
					}
				]
		  }
		  hcontainer
		  {
 				scrollbox( texTile03 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor03 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
        scrollbox( textureFormat03 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel03 != "" )
			}
		]
  	vcontainer
			{
	   	hcontainer
				{
 				fxedit( colorLabel04 )
					[
						exec
						{
							width( 210 )
							labelwidth( 0 )
						}
					]
				fileedit( colorMap04 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel04 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile04 )
			[
				exec
				{
					width( 330 )
					labelwidth( 230 )
					label( "" )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor04 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
      scrollbox( textureFormat04 )
			[
				exec
				{
					unsorted()
					width( 170 )
					labelwidth( 0 )
					tooltip( "Changes the compression method for the texture")
				}
			]
		}
	}
		[
			exec
			{
				visible( colorLabel04 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel05 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap05 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel05 )
					}
				]
		  }
		  hcontainer
		  {
   		scrollbox( texTile05 )
			[
				exec
				{
					width( 330 )
					labelwidth( 230 )
					label( "" )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor05 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
      scrollbox( textureFormat05 )
			[
				exec
				{
					unsorted()
					width( 170 )
					labelwidth( 0 )
					tooltip( "Changes the compression method for the texture")
				}
			]
		}
	}
		[
			exec
			{
				visible( colorLabel05 != "" )
			}
		]
  	vcontainer
		{
	        hcontainer
		{
 			fxedit( colorLabel06 )
			[
				exec
				{
					width( 210 )
					labelwidth( 0 )
				}
			]
			fileedit( colorMap06 )
			[
				exec
				{
					width( 550 )
					labelwidth( 0 )
					label( colorLabel06 )
				}
			]
		  }
		  hcontainer
		  {
   			scrollbox( texTile06 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor06 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
        scrollbox( textureFormat06 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel06 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel07 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap07 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel07 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile07 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor07 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
        scrollbox( textureFormat07 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel07 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel08 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap08 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel08 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile08 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor08 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
       	scrollbox( textureFormat08 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel08 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel09 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap09 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel09 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile09 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor09 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
        scrollbox( textureFormat09 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel09 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel10 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap10 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel10 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile10 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor10 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
       	scrollbox( textureFormat10 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel10 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel11 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap11 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel11 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile11 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor11 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
      	scrollbox( textureFormat11 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel11 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel12 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap12 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel12 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile12 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor12 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
       	scrollbox( textureFormat12 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel12 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel13 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap13 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel13 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile13 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor13 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
     	 scrollbox( textureFormat13 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel13 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel14 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap14 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel14 )
					}
				]
		  }
		  hcontainer
		  {
   			scrollbox( texTile14 )
				[
					exec
					{
						width( 330 )
						labelwidth( 230 )
						label( "" )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterColor14 )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
      	scrollbox( textureFormat14 )
				[
					exec
					{
						unsorted()
						width( 170 )
						labelwidth( 0 )
						tooltip( "Changes the compression method for the texture")
					}
				]
			}
		}
		[
			exec
			{
				visible( colorLabel14 != "" )
			}
		]
  	vcontainer
		{
	  	hcontainer
			{
 				fxedit( colorLabel15 )
				[
					exec
					{
						width( 210 )
						labelwidth( 0 )
					}
				]
				fileedit( colorMap15 )
				[
					exec
					{
						width( 550 )
						labelwidth( 0 )
						label( colorLabel15 )
					}
				]
		  }
		  hcontainer
		  {
			scrollbox( texTile15 )
			[
				exec
				{
					width( 330 )
					labelwidth( 230 )
					label( "" )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor15 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
      scrollbox( textureFormat15 )
			[
				exec
				{
					unsorted()
					width( 170 )
					labelwidth( 0 )
					tooltip( "Changes the compression method for the texture")
				}
			]
		}
	}
		[
			exec
			{
				visible( colorLabel15 != "" )
			}
		]
	}
	[
		exec
		{
    	visible( materialType == "CGFXworld" || materialType == "CGFXmodel" )
			groupBox( "CGFX Infomation" )
		}
	]
////////////////////////////////////////END CGFX SPECIFIC SECTION////////////////////////////////////////////////////////////////////////////////////////
	vcontainer
	{
		hcontainer
		{
			checkbox(treeCanopyEnableSway)
			[
				exec
				{
					label( "Enable sway" )
					labelwidth( 150 )
					width( 230 )
				}
			]
		}
		hcontainer
		{
			floatedit( treeCanopyMinimumSway, 0.01, 0.05 )
			[
				exec
				{
					label( "Minimum sway" )
					tooltip("Minimum sway specifies the least sway fraction, Random value between 1 and (1-minimum sway is added per leaf).")
					labelwidth( 150 )
					width( 230 )
				}
			]
			floatedit( treeCanopySwayRange, 0.01, 0.05 )
			[
				exec
				{
					label( "Sway range" )
					tooltip("Sway range controls the maximum amount of sway that is applied above the minimum sway.")
					labelwidth( 150 )
					width( 230 )
				}
			]
			floatedit( treeCanopyScaleRotationAngles, 0.01, 0.05 )
			[
				exec
				{
					label( "Scale rotation angles" )
					tooltip("Think of this value as the inverse distance from pivot to leaf. Closer the leaves to the pivot, higher this value.")
					labelwidth( 150 )
					width( 230 )
				}
			]
		}
		[
			exec
			{
	    		visible( treeCanopyEnableSway == 1 )
			}
		]
		hcontainer
		{
			floatedit( treeCanopyAmbientOcclusion, 0.01, 0.05 )
			[
				exec
				{
					label( "Ambient Occlusion" )
					tooltip("Amount of AO applied (0 means no AO, 1 means full AO).")
					labelwidth( 150 )
					width( 230 )
				}
			]
			floatedit( treeCanopyRadialLighting, 0.01, 0.05 )
			[
				exec
				{
					label( "Radial Lighting" )
					tooltip("Amount of radial lighting (0 means vertex normal dominates, 1 means radial normal dominates).")
					labelwidth( 150 )
					width( 230 )
				}
			]
			floatedit( treeCanopyLightingAmount, 0.01, 0.05 )
			[
				exec
				{
					label( "Lighting Amount" )
					tooltip("Amount of lighting applied (0 means ambient lighting, 1 means harsh lighting).")
					labelwidth( 150 )
					width( 230 )
				}
			]
		}
		hcontainer
		{
			floatedit( treeCanopySpecularRoughness, 0.01, 0.05 )
			[
				exec
				{
					label( "Specular Roughness" )
					tooltip("Specular roughness (0 means smooth, 1 means rough).")
					labelwidth( 150 )
					width( 230 )
				}
			]
		}
		hcontainer
		{
			colorpicker( treeCanopyScatterColor )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Sub-surface scatter" )
					tooltip( "Color of the light coming through the leaves." )
				}
			]
			colorpicker( colorTint )
			[
				exec
				{
					tooltip( "Tint the diffuse texture." )
					labelwidth( 40 )
					label( "Tint" )
				}
			]
	
		}

	}
	[
		exec
		{
			visible( materialType == "tree canopy" || materialType == "punch thru" )
			groupBox( "Tree Canopy Material or Punch Thru" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					visible( materialType != "sky" && materialType != "water" )
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamColor )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
					visible( materialType == "impact mark" || materialType == "unlit" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Color map" )
			visible( materialType != "sky layered hdr" && materialType != "water" && materialType != "binoculars" && materialType != "crosshair" && materialType != "cod7 simple model" && materialType != "cod7 basic model" && materialType != "cod7 weapon" && materialType != "cod7 alpha model" && materialType != "cod7 simple world" && materialType != "cod7 basic world" && materialType != "cod7 alpha world" && materialType != "SW4 model" && materialType != "SW4 world" && materialType != "SW4 fullscreen" && materialType != "CGFXmodel" && materialType != "CGFXworld" && materialType != "ui3d" && materialType != "extra camera" && materialType != "dual blend world" && materialType != "cod7 model cloak" && materialType != "cod7world water" && materialType != "cod7world emissive" )
		}
	]
	vcontainer
	{
		fileedit( colorDetailMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			floatedit( colorDetailScaleX, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "x scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( colorDetailScaleY, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "y scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			scrollbox( filterColorDetail )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColorDetail )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColorDetail )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Color detail map" )
			visible( materialType == "model phong" && ( materialFeatureType == "clothwet" ) )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap01 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
			colorpicker( colorTint )
			[
				exec
				{
					tooltip( "for world materials, instead of vertex coloring." )
					labelwidth( 40 )
					label( "Tint" )
					visible( materialType != "2d" && materialType != "emblem" && materialType != "ui3d" && materialType != "binoculars" && materialType != "crosshair" && materialType != "extra camera" && materialType != "distortion" && materialType != "particle cloud" && materialType != "sky" && materialType != "water" && materialType != "objective" )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					visible( materialType != "sky" && materialType != "water" )
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamColor )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Color map 2" )
			visible( materialType == "sky noncubemap transition" )
		}
	]
	vcontainer
	{
		fileedit( normalMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			scrollbox( tileNormal )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterNormal )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatNormal )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipNormal )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType != "2d" && materialType != "emblem" && materialType != "ui3d" && materialType != "binoculars" && materialType != "crosshair" && materialType != "extra camera" && materialType != "cod7 simple model" && materialType != "cod7 basic model" && materialType != "cod7 weapon" && materialType != "cod7 alpha model" && materialType != "cod7 simple world" && materialType != "cod7 basic world" && materialType != "cod7 alpha world" && materialType != "unlit" && materialType != "effect" && materialType != "distortion" && materialType != "tools" && materialType != "sky" && materialType != "sky layered hdr" && materialType != "sky noncubemap" && materialType != "sky noncubemap transition" && materialType != "particle cloud" && materialType != "objective" && materialType != "model ambient" && materialType != "dynamic foliage" && materialType != "cloud" && materialType != "SW4 model" && materialType != "SW4 world" && materialType != "SW4 fullscreen" && materialType != "CGFXmodel" && materialType != "CGFXworld" && materialType != "cod7 scroll" && materialType != "dual blend world" && materialType != "cod7 model cloak" && materialType != "cod7world water" && materialType != "cod7world emissive" && materialType != "unlit decal blend")
			groupBox( "Normal map" )
		}
	]
	vcontainer
	{
		fileedit( detailMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			floatedit( detailScaleX, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "x scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( detailScaleY, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "y scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( detailScaleHeight, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map more bumpy. (1.0 is default)")
					label( "height scale" )
					labelwidth( 85 )
					width( 145 )
				}
			]
			scrollbox( filterDetail )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatDetail )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipDetail )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamDetail )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Detail normal map" )
			visible( materialType == "model phong" || materialType == "weapon phong" || materialType == "custom" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			floatedit( waterScrollX0, 0.1, 0.2 )
			[
				exec
				{
					unsorted()
					width( 200 )
					labelwidth( 120 )
					label( "Water 0 Scroll X" )
				}
			]
			floatedit( waterScrollX1, 0.1, 0.2 )
			[
				exec
				{
					width( 200 )
					labelwidth( 120 )
					label( "Water 1 Scroll X" )
				}
			]
			floatedit( waterScrollX2, 0.1, 0.2 )
			[
				exec
				{
					width( 200 )
					labelwidth( 120 )
					label( "Water 2 Scroll X" )
				}
			]
		}
		hcontainer
		{
			floatedit( waterScrollY0, 0.1, 0.2 )
			[
				exec
				{
					width( 200 )
					labelwidth( 120 )
					label( "Water 0 Scroll Y" )
				}
			]
			floatedit( waterScrollY1, 0.1, 0.2 )
			[
				exec
				{
					width( 200 )
					labelwidth( 120 )
					label( "Water 1 Scroll Y" )
				}
			]
			floatedit( waterScrollY2, 0.1, 0.2 )
			[
				exec
				{
					width( 200 )
					labelwidth( 120 )
					label( "Water 2 Scroll Y" )
				}
			]
		}
		hcontainer
		{
			colorpicker( waterColor )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Color" )
					tooltip( "Base color of the water itself" )
				}
			]
			floatedit( waterFeather, 0.01, 0.05 )
			[
				exec
				{
					width( 100 )
					labelwidth( 50 )
					label( "Feather" )
					tooltip( "How the water fades off around the edges" )
				}
			]
			floatedit( waterOpacity, 0.01, 0.05 )
			[
				exec
				{
					width( 100 )
					labelwidth( 50 )
					label( "Opacity" )
					tooltip( "How cloudy the water is" )
				}
			]
			floatedit( waterRoughness, 0.01, 0.05 )
			[
				exec
				{
					width( 100 )
					labelwidth( 50 )
					label( "Roughness" )
					tooltip( "Roughness of the water surface's bump map" )
				}
			]
			floatedit( waterRefract, 1, 5 )
			[
				exec
				{
					width( 100 )
					labelwidth( 50 )
					label( "Refraction" )
					tooltip( "Amount of refraction distortion to apply" )
				}
			]
		}
		hcontainer
		{
			colorpicker( waterSkyColor )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Sky Reflection Color" )
					tooltip( "Average sky color of the surrounding world" )
				}
			]
			colorpicker( waterGroundColor )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Ground Reflection Color" )
					tooltip( "Average ground color of the surrounding world" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanSunBrightness, 0.01, 0.05 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Sun Brightness" )
					tooltip( "Brightness of the sun reflection" )
				}
			]
			floatedit( oceanSunSize, 0.01, 0.05 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Sun Size" )
					tooltip( "Size of the sun reflection" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "water" || materialType == "ocean" )
			groupBox( "Water map" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			floatedit( oceanFoamIntensity, 0.01, 0.05 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Foam Intensity" )
					tooltip( "Alpha value for the foam floating on top of the water, (i.e. wave crests)" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanFoamOverbright, 0.01, 0.05 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Foam Overbright" )
					tooltip( "Allows the foam to go super-white when there's a lot of it - useful for getting like whitecaps and stuff" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanFoamRepeat, 1, 16 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Foam Repeat" )
					tooltip( "UV mapping for the foam texture - how often it repeats across the world" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanBumpRepeat, 1, 16 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Bump Repeat" )
					tooltip( "UV mapping for the bump map - how often it repeats across the world" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanShoreFeather, 1, 10 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Shore Feather" )
					tooltip( "Distance from the shore that the foam starts to appear at" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanShoreEdgeness, 0.01, 0.05 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Shore Edgeness" )
					tooltip( "Controls the Z-feather at the very edge of the water" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanShoreBrightness, 0.01, 0.05 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Shore Brightness" )
					tooltip( "Intensity of the foam around the shoreline" )
				}
			]
		}
		hcontainer
		{
			floatedit( oceanReflectFuzzyness, 0.01, 0.05 )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Reflection Fuzzyness" )
					tooltip( "Fuzzyness of the sky reflection" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "ocean" )
			groupBox( "Ocean parameters" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( specDetailMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			floatedit( specDetailScaleX, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "x scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( specDetailScaleY, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "y scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			scrollbox( formatSpecularDetail )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "model phong" && materialFeatureType == "clothwet" )
			groupBox( "Specular color detail map" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( cosinePowerMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileSpecular )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecular )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecular )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecular )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType != "2d" && materialType != "emblem" && materialType != "ui3d" && materialType != "binoculars" && materialType != "crosshair" && materialType != "extra camera" && materialType != "cod7 simple model" && materialType != "cod7 basic model" && materialType != "cod7 weapon" && materialType != "cod7 alpha model" && materialType != "cod7 simple world" && materialType != "cod7 basic world" && materialType != "cod7 alpha world" && materialType != "unlit" && materialType != "effect" && materialType != "distortion" && materialType != "tools" && materialType != "sky" && materialType != "sky layered hdr" && materialType != "sky noncubemap" && materialType != "sky noncubemap transition" && materialType != "water" && materialType != "particle cloud" && materialType != "objective" && materialType != "model ambient" && materialType != "dynamic foliage" && materialType != "cloud" && materialType != "ocean" && materialType != "tree canopy"  && materialType != "punch thru" && materialType != "SW4 model" && materialType != "SW4 world" && materialType != "SW4 fullscreen" && materialType != "CGFXmodel" && materialType != "CGFXworld" && materialType != "cod7 scroll" && materialType != "dual blend world" && materialType != "cod7 model cloak" && materialType != "cod7world water" && materialType != "cod7world emissive" && materialType != "unlit decal blend")
			groupBox( "Specular roughness map" )
		}
	]	
	vcontainer
	{
		hcontainer
		{
			fileedit( specColorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
	  }
		hcontainer
		{
			scrollbox( tileSpecular )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecular )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecular )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecular )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
		hcontainer
		{
			floatedit( specAmount, 0.01, 0.05 )
			[
				exec
				{
					label( "Specular Amount" )
					tooltip( "Use this to repress Specularity: 0 is fully suppressed, 1 is non-suppressed." )
					labelwidth( 120 )
					width( 180 )
				}
			]
	  }
	}		
	[
		exec
		{
			visible( materialType == "world phong" || materialType == "model phong" || materialType == "weapon phong" || materialType == "rope" || materialType == "custom" )
			groupBox( "Specular color map" )
		}
	]
	vcontainer
	{
			hcontainer
			{
				fileedit( specColorMap )
				[
					exec
					{
						width( 450 )
						labelwidth( 0 )
					}
				]
	    		}
			hcontainer
			{
				scrollbox( tileSpecular )
				[
					exec
					{
						width( 115 )
						labelwidth( 0 )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterSpecular )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
				scrollbox( formatSpecular )
				[
					exec
					{
						width( 165 )
						labelwidth( 0 )
					}
				]
			}
			checkbox( nopicmipSpecular )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
	}
	[
		exec
		{
			visible( (materialType == "tree canopy" || materialType == "impact mark") )
			groupBox( "Specular color map" )
		}
	]

	vcontainer
	{
 		vcontainer
		{
			hcontainer
			{
				fileedit( specReflectionMap )
				[
					exec
					{
						width( 450 )
						labelwidth( 0 )
					}
				]
			}
			hcontainer
			{
				scrollbox( tileOcc )
				[
					exec
					{
						width( 115 )
						labelwidth( 0 )
						tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
					}
				]
				scrollbox( filterOcc )
				[
					exec
					{
						unsorted()
						width( 250 )
						labelwidth( 0 )
						tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
					}
				]
			}
		}
		[
			exec
			{
				visible( materialType == "weapon phong" )
				groupBox( "Specular Reflection Map" )
			}
		]
	
		hcontainer
		{
			floatedit( reflectionProbeAmount, 0.01, 0.05 )
			[
				exec
				{
					label( "Amount" )
					tooltip( "Controls how much reflection map is shown on surface: 1 = full amount 0 = none." )
					labelwidth( 80 )
					width( 140 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "world phong" || materialType == "model phong" || materialType == "weapon phong" || materialType == "custom" || materialType == "water" || materialType == "ocean" )
			groupBox( "Env Mapping" )
		}
	]

 	vcontainer
	{
		hcontainer
		{
			fileedit( occMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileOcc )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterOcc )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "weapon phong" )
			groupBox( "Ambient Occulsion Map" )
		}
	]

	vcontainer
	{
		fileedit( colorDetailMap )
		[
			exec
			{
				tooltip("Leave this empty when the camo is controlled by the code.")
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			floatedit( colorDetailScaleX, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "x scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( colorDetailScaleY, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "y scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			scrollbox( filterColorDetail )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColorDetail )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColorDetail )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Camo map" )
			visible( materialType == "weapon phong" )
		}
	]

//------------------------------------------------------------------------------------------------------------------------------------
// cod7world water
//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "cod2rad Lightmap RefImage Diffuse Map" )
			visible( materialType == "cod7world water" )
		}
	]


	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile00 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor00 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat00 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor00 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Normal Map" )
			visible( materialType == "cod7world water" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap01 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile01 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor01 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat01 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor01 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Detail Normal Map" )
			visible( materialType == "cod7world water" )
		}
	]


	vcontainer
	{
		hcontainer
		{
			floatedit( waterNormalTextureScale, 0.01, 0.05 )
			[
				exec
				{
					label( "Normal Texture Wrap" )
					tooltip( "Controls the point Normal map repeats." )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit( waterDetailNormalTextureScale, 0.01, 0.05 )
			[
				exec
				{
					label( "Detail Normal Texture Wrap" )
					tooltip( "Controls the point DetailNormal map repeats." )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}		
		
		hcontainer
		{
			floatedit( waterNormalScale, 0.01, 0.05 )
			[
				exec
				{
					label( "Normal Scale" )
					tooltip( "Controls the strength of the normal map." )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit( waterDetailNormalScale, 0.01, 0.05 )
			[
				exec
				{
					label( "Detail Normal Scale" )
					tooltip( "Controls the strength of the detail normal map." )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}

		hcontainer
		{
			floatedit( waterNormalScrollAngleA, 0.01, 0.05 )
			[
				exec
				{
					label( "Normal ScrollAngle A" )
					tooltip( "Controls the scroll angle of Normal A." )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit( waterNormalScrollAngleB, 0.01, 0.05 )
			[
				exec
				{
					label( "Normal ScrollAngle B" )
					tooltip( "Controls the scroll speed of Normal B." )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}

		hcontainer
		{
			floatedit( waterNormalScrollSpeedA, 0.001, 0.005 )
			[
				exec
				{
					label( "Normal ScrollSpeed A" )
					tooltip( "Controls the scroll speed of Normal A." )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit( waterNormalScrollSpeedB, 0.001, 0.005 )
			[
				exec
				{
					label( "Normal ScrollSpeed B" )
					tooltip( "Controls the scroll speed of Normal B." )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}

		hcontainer
		{
			floatedit( waterDetailNormalScrollAngleA, 0.01, 0.05 )
			[
				exec
				{
					label( "DetailNormal ScrollAngle A" )
					tooltip( "Controls the scroll angle of DetailNormal A." )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit( waterDetailNormalScrollAngleB, 0.01, 0.05 )
			[
				exec
				{
					label( "DetailNormal ScrollAngle B" )
					tooltip( "Controls the scroll angle of DetailNormal B." )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}

		hcontainer
		{
			floatedit( waterDetailNormalScrollSpeedA, 0.001, 0.005 )
			[
				exec
				{
					label( "DetailNormal ScrollSpeed A" )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit( waterDetailNormalScrollSpeedB, 0.001, 0.005 )
			[
				exec
				{
					label( "DetailNormal ScrollSpeed B" )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}
		
		hcontainer
		{
			floatedit( waterOpacityAmount, 0.01, 0.05 )
			[
				exec
				{
					label( "Opacity" )
					labelwidth( 200 )
					width( 280 )
				}
			]		

			floatedit( waterFarDistance, 0.01, 0.05 )
			[
				exec
				{
					label( "Water Far Color Distance" )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}		
	
		hcontainer
		{
			floatedit( waterSpecularRoughnessA, 0.01, 0.05 )
			[
				exec
				{
					label( "Specular Roughness Hi" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( waterSpecularRoughnessB, 0.01, 0.05 )
			[
				exec
				{
					label( "Specular Roughness Lo" )
					labelwidth( 200 )
					width( 280 )
				}
			]
			
			floatedit( waterSpecularAmount, 0.01, 0.05 )
			[
				exec
				{
					label( "Specular Amount" )
					labelwidth( 200 )
					width( 280 )
				}
			]			
		}	
		
		hcontainer
		{
			floatedit( waterNearColorR, 0.01, 0.05 )
			[
				exec
				{
					label( "Water Color Red" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( waterNearColorG, 0.01, 0.05 )
			[
				exec
				{
					label( "Water Color Green" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( waterNearColorB, 0.01, 0.05 )
			[
				exec
				{
					label( "Water Color Blue" )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}	
	
	
		hcontainer
		{
			floatedit( waterFarColorR, 0.01, 0.05 )
			[
				exec
				{
					label( "Water Far Color Red" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( waterFarColorG, 0.01, 0.05 )
			[
				exec
				{
					label( "Water Far Color Green" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( waterFarColorB, 0.01, 0.05 )
			[
				exec
				{
					label( "Water Far Color Blue" )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}	
	
	
		hcontainer
		{
			floatedit( scatterColorR, 0.01, 0.05 )
			[
				exec
				{
					label( "Water / Foam Scatter Red" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( scatterColorG, 0.01, 0.05 )
			[
				exec
				{
					label( "Water / Foam Scatter Green" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( scatterColorB, 0.01, 0.05 )
			[
				exec
				{
					label( "Water / Foam Scatter Blue" )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}	
	
		
	}
	[
		exec
		{
			groupBox( "Main Material Properties" )
			visible( materialType == "cod7world water" )
		}
	]

	//--------------------------------------------------------------------------------------------------------------------
	// Optional waterThinFilm
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( waterThinFilm )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "ThinFilm" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7world water" )
		}
	]


	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap02 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile02 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor02 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat02 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor02 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
		
		hcontainer
		{
			floatedit( waterThinFilmDepth, 0.001, 0.05 )
			[
				exec
				{
					label( "ThinFilm Depth" )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit( waterThinFilmAmount, 0.001, 0.05 )
			[
				exec
				{
					label( "ThinFilm Amount" )
					tooltop("Amount of thinfilm effect to apply to reflection probe.")
					labelwidth( 200 )
					width( 280 )
				}
			]
		}		
	}
	[
		exec
		{
			groupBox( "Thin Film Color Ramp" )
			visible( materialType == "cod7world water" && waterThinFilm == 1 )
		}
	]

	//--------------------------------------------------------------------------------------------------------------------
	// Optional waterCustomReflectionProbe
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( waterCustomReflectionProbe )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Custom Reflection Probe" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7world water" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap03 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile03 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor03 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat03 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor03 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
		
		hcontainer
		{
			floatedit( waterCustomReflectionProbeScaleR, 0.01, 0.05 )
			[
				exec
				{
					label( "Probe Scale Red" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( waterCustomReflectionProbeScaleG, 0.01, 0.05 )
			[
				exec
				{
					label( "Probe Scale Green" )
					labelwidth( 200 )
					width( 280 )
				}
			]		
		
			floatedit( waterCustomReflectionProbeScaleB, 0.01, 0.05 )
			[
				exec
				{
					label( "Probe Scale Blue" )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}			
	}
	[
		exec
		{
			groupBox( "Custom Refelection CubeMap" )
			visible( materialType == "cod7world water" && waterCustomReflectionProbe == 1)
		}
	]


	//--------------------------------------------------------------------------------------------------------------------
	// Optional waterVertexGerstnerWaves
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( waterVertexGerstnerWaves )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Vertex Gerstner Waves" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7world water" )
		}
	]
		
	vcontainer
	{
		hcontainer
		{
			floatedit( waterBobWaveLength, 0.001, 0.05 )
			[
				exec
				{
					label( "Bob Wavelength" )
					labelwidth( 200 )
					width( 280 )
				}
			]


			floatedit(waterBobAmount, 0.001, 0.05 )
			[
				exec
				{
					label( "Bob Amount" )
					labelwidth( 200 )
					width( 280 )
				}
			]




		}		
		
		
		hcontainer
		{
			floatedit( waterWeaveWaveLength, 0.001, 0.05 )
			[
				exec
				{
					label( "Weave Wavelength" )
					labelwidth( 200 )
					width( 280 )
				}
			]

			floatedit(waterWeaveAmount, 0.001, 0.05 )
			[
				exec
				{
					label( "Weave Amount" )
					labelwidth( 200 )
					width( 280 )
				}
			]
		}	
	}
	[
		exec
		{
			groupBox( "Gerstner Bob Weave" )
			visible( materialType == "cod7world water" && waterVertexGerstnerWaves == 1)
		}
	]


	//--------------------------------------------------------------------------------------------------------------------
	// Ocean water foam
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( waterOcean )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Ocean water" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7world water" )
		}
	]


	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap04 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile04 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor04 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat04 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor04 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Foam map" )
			visible( materialType == "cod7world water" && waterOcean == 1)
		}
	]


	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap05 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile05 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor05 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat05 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor05 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Foam noise map" )
			visible( materialType == "cod7world water" && waterOcean == 1)
		}
	]


	// todo water colours, enable far? range control distortion, feather etc!!

//------------------------------------------------------------------------------------------------------------------------------------
// cod7world emissive
//------------------------------------------------------------------------------------------------------------------------------------	

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile00 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor00 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat00 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor00 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Emissive Color Map" )
			visible( materialType == "cod7world emissive" || materialType == "cod7model emissive")
		}
	]


	//--------------------------------------------------------------------------------------------------------------------
	// Optional distanceFieldMask
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( distanceFieldMask )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Signed Distance Field Mask" )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7world emissive" || materialType == "cod7model emissive" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap01 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile01 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor01 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat01 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor01 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Signed Distance Field Mask Map" )
			visible( (materialType == "cod7world emissive" || materialType == "cod7model emissive") && distanceFieldMask == "1" )
		}
	]


//------------------------------------------------------------------------------------------------------------------------------------
// cod7 model cloak BEGIN
//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
	  		checkbox( alphaTexture )
			[
				exec
				{
					righttext()
					labelwidth( 200 )
					label( "Alpha Blend" )
					tooltip( "Click this to enable alpha blending" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Diffuse Map" )
			visible( materialType == "cod7 model cloak" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( ambientOcclusionMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTileAmbientOcclusion )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterAmbientOcclusion )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatAmbientOcclusion )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipAmbientOcclusion )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Ambient Occlusion Map" )
			visible( materialType == "cod7 model cloak" )
		}
	]

	vcontainer
	{
		fileedit( normalMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			scrollbox( tileNormal )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterNormal )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatNormal )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipNormal )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Normal Map" )
			visible( materialType == "cod7 model cloak" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( specularRoughnessMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTileSpecularRoughness )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecularRoughness )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecularRoughness )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecularRoughness )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Specular Roughness Map" )
			visible( materialType == "cod7 model cloak" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( specularCorrectionMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTileSpecularCorrection )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecularCorrection )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecularCorrection )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecularCorrection )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Specular Correction Map" )
			visible( materialType == "cod7 model cloak" )
		}
	]

	//--------------------------------------------------------------------------------------------------------------------
	// optional cloak effect
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( cloakingDevice )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Cloak" )
				tooltip( "Click this to enable cloak effect." )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 model cloak" && alphaDissolve != 1 )
		}
	]


	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap05 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile05 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor05 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat05 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor05 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloak Mask Map" )
			visible( materialType == "cod7 model cloak" && cloakingDevice == 1 && alphaDissolve != 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap06 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile06 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor06 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat06 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor06 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloak Transition Color Map" )
			visible( materialType == "cod7 model cloak" && cloakingDevice == 1 && alphaDissolve != 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap07 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile07 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor07 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat07 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor07 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloak Distortion Map" )
			visible( materialType == "cod7 model cloak" && cloakingDevice == 1 && alphaDissolve != 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
//			floatedit( cloakScaleU, 0.1, 1.0 )
//			[
//				exec
//				{
//					label( "Cloak U" )
//					tooltip( "u scaler for cloak map." )
//					labelwidth( 80 )
//					width( 160 )
//				}
//			]

//			floatedit( cloakScaleV, 0.1, 1.0 )
//			[
//				exec
//				{
//					label( "Cloak V" )
//					tooltip( "v scaler for cloak map." )
//					labelwidth( 80 )
//					width( 160 )
//				}
//			]
			
			floatedit( cloakDistortionScaleU, 0.1, 1.0 )
			[
				exec
				{
					label( "Distortion U" )
					tooltip( "u scaler for distortion map." )
					labelwidth( 100 )
					width( 180 )
				}
			]

			floatedit( cloakDistortionScaleV, 0.1, 1.0 )
			[
				exec
				{
					label( "Distortion V" )
					tooltip( "v scaler for distorion map." )
					labelwidth( 100 )
					width( 180 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloak Distortion UV Scale" )
			visible( materialType == "cod7 model cloak" && cloakingDevice == 1 && alphaDissolve != 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			floatedit( cloakDistortionTimeScaleU, 0.01, 0.1 )
			[
				exec
				{
					label( "Time Scale U" )
					tooltip( "u time scaler for distortion map animation." )
					labelwidth( 100 )
					width( 200 )
				}
			]

			floatedit( cloakDistortionOffsetScaleU, 0.01, 0.1 )
			[
				exec
				{
					label( "Offset Scale U" )
					tooltip( "u offset scaler for distortion map animation." )
					labelwidth( 120 )
					width( 200 )
				}
			]

			floatedit( cloakDistortionTimeScaleV, 0.01, 0.1 )
			[
				exec
				{
					label( "Time Scale V" )
					tooltip( "v time scaler for distortion map animation." )
					labelwidth( 100 )
					width( 200 )
				}
			]

			floatedit( cloakDistortionOffsetScaleV, 0.01, 0.1 )
			[
				exec
				{
					label( "Offset Scale V" )
					tooltip( "v offset scaler for distortion map animation." )
					labelwidth( 120 )
					width( 200 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloak Distortion UV Animation" )
			visible( materialType == "cod7 model cloak" && cloakingDevice == 1 && alphaDissolve != 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			floatedit( cloakDistortionAmountX, 0.01, 0.1 )
			[
				exec
				{
					label( "Displacement X" )
					tooltip( "x scaler for distortion map." )
					labelwidth( 120 )
					width( 180 )
				}
			]

			floatedit( cloakDistortionAmountY, 0.01, 0.1 )
			[
				exec
				{
					label( "Displacement Y" )
					tooltip( "y scaler for distortion map." )
					labelwidth( 120 )
					width( 180 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloak Distortion Displacement" )
			visible( materialType == "cod7 model cloak" && cloakingDevice == 1 && alphaDissolve != 1 )
		}
	]

	//--------------------------------------------------------------------------------------------------------------------
	// optional alpha dissolve
	//--------------------------------------------------------------------------------------------------------------------

	vcontainer
	{
	  	checkbox( alphaDissolve )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Alpha Dissolve" )
				tooltip( "Click this to enable color dissovle effect." )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 model cloak" && cloakingDevice != 1)
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile00 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor00 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat00 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor00 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Alpha Dissolve Mask Map" )
			visible( materialType == "cod7 model cloak" && alphaDissolve == 1 && cloakingDevice != 1)
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap01 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile01 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor01 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat01 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor01 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Alpha Dissolve Color Map" )
			visible( materialType == "cod7 model cloak" && alphaDissolve == 1 && cloakingDevice != 1)
		}
	]


	//--------------------------------------------------------------------------------------------------------------------
	// optional color dissolve
	//--------------------------------------------------------------------------------------------------------------------

	vcontainer
	{
	  	checkbox( colorDissolve )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Color Dissolve" )
				tooltip( "Click this to enable color dissovle effect." )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 model cloak" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap02 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile02 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor02 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat02 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor02 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Color Dissolve Index Map" )
			visible(( materialType == "cod7 model cloak" ) && colorDissolve == 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap14 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile14 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor14 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat14 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor14 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Color Dissolve Mask Map" )
			visible(( materialType == "cod7 model cloak" ) && colorDissolve == 1 )
		}
	]
	
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap15 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile15 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor15 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat15 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor15 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	
		hcontainer
		{
			spinedit( colorDissolveLutX, 8, 16 )
			[
				exec
				{
					label( "3dVolume Width" )
					tooltip( "width of 3dVolume color map." )
					labelwidth( 120 )
					width( 180 )
				}
			]

			spinedit( colorDissolveLutY, 8, 16 )
			[
				exec
				{
					label( "3dVolume Height" )
					tooltip( "height of 3dVolume color map." )
					labelwidth( 120 )
					width( 180 )
				}
			]
			
			spinedit( colorDissolveLutZ, 8, 16 )
			[
				exec
				{
					label( "3dVolume Depth" )
					tooltip( "depth of 3dVolume color map." )
					labelwidth( 120 )
					width( 180 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Color Dissolve 3dVolume Color Map" )
			visible(( materialType == "cod7 model cloak" ) && colorDissolve == 1 )
		}
	]


	//--------------------------------------------------------------------------------------------------------------------
	// optional local splatter
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( localSplatter )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Splatter" )
				tooltip( "Click this to enable local splatter." )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 model cloak" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap08 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile08 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor08 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat08 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor08 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Splatter Mask Map" )
			visible(( materialType == "cod7 model cloak" ) && localSplatter == 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap09 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile09 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor09 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat09 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor09 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Splatter Specular Roughness Map" )
			visible(( materialType == "cod7 model cloak" ) && localSplatter == 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap10 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile10 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor10 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat10 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor10 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Splatter Diffuse Map" )
			visible(( materialType == "cod7 model cloak" ) && localSplatter == 1 )
		}
	]
	//--------------------------------------------------------------------------------------------------------------------
	// optional local glow
	//--------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
	  	checkbox( localGlow )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Local Glow" )
				tooltip( "Click this to enable local glow." )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 model cloak" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap11 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile11 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor11 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat11 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor11 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Local Glow Intensity Mask Map" )
			visible(( materialType == "cod7 model cloak" ) && localGlow == 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap12 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile12 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor12 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat12 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor12 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Local Glow Base Index Map" )
			visible(( materialType == "cod7 model cloak" ) && localGlow == 1 )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap13 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile13 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor13 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat13 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor13 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}			
			
		hcontainer
		{
			spinedit( glowLutX, 8, 16 )
			[
				exec
				{
					label( "3dVolume Width" )
					tooltip( "width of 3dVolume color map." )
					labelwidth( 120 )
					width( 180 )
				}
			]

			spinedit( glowLutY, 8, 16 )
			[
				exec
				{
					label( "3dVolume Height" )
					tooltip( "height of 3dVolume color map." )
					labelwidth( 120 )
					width( 180 )
				}
			]
			
			spinedit( glowLutZ, 8, 16 )
			[
				exec
				{
					label( "3dVolume Depth" )
					tooltip( "depth of 3dVolume color map." )
					labelwidth( 120 )
					width( 180 )
				}
			]
			
			floatedit( glowCycleRateX, 0.01, 0.1 )
			[
				exec
				{
					label( "Cycle Speed" )
					tooltip( "scaler for cycle rate." )
					labelwidth( 100 )
					width( 180 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Local Glow 3dVolume Color Map" )
			visible(( materialType == "cod7 model cloak" ) && localGlow == 1 )
		}
	]



//------------------------------------------------------------------------------------------------------------------------------------
// dual blend world BEGIN
//------------------------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------------------------
	// cod2rad lightmap refImage
	//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
					tooltip( "diffuse map used for lighting during cod2rad lightmap generation")
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "cod2rad Lightmap RefImage Diffuse Map" )
			visible( materialType == "dual blend world" )
		}
	]
	//------------------------------------------------------------------------------------------------------------------------------------
	// blend layer 0 textures
	//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile00 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor00 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat00 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor00 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Diffuse Map 0" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap01 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile01 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor01 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat01 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor01 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Normal Map 0" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap02 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile02 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor02 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat02 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor02 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Specular Roughness Map 0" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap08 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile08 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor08 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat08 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor08 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Ambient Occlusion Map 0" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap03 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile03 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor03 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat03 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor03 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Specular Correction Map 0" )
			visible( materialType == "dual blend world" )
		}
	]
	//------------------------------------------------------------------------------------------------------------------------------------
	// blend layer 1 textures
	//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap04 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile04 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor04 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat04 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor04 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Diffuse Map 1" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap05 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile05 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor05 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat05 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor05 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Normal Map 1" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap06 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile06 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor06 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat06 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor06 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Specular Roughness Map 1" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap09 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile09 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor09 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat09 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor09 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Ambient Occlusion Map 1" )
			visible( materialType == "dual blend world" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap07 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile07 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor07 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat07 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor07 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Specular Correction Map 1" )
			visible( materialType == "dual blend world" )
		}
	]



//------------------------------------------------------------------------------------------------------------------------------------
// SKY-HDR BEGIN
//------------------------------------------------------------------------------------------------------------------------------------
   	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamColor )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
					visible( materialType == "impact mark" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cubemap texture" )
			visible( materialType == "sky layered hdr" )
		}
	]
	//------------------------------------------------------------------------------------------------------------------------------------
	// layered_skybox cloud layer 1
	//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile00 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor00 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat00 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor00 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
		vcontainer
		{
			hcontainer
			{
			floatedit( cloudLayer1Height, 1.0, 10.0 )
			[
				exec
				{
					label( "height" )
					tooltip( "cloud layers height, the layers are combined in order so subsequent layer must be lower." )
					labelwidth( 80 )
					width( 160 )
				}
			]

			floatedit( cloudLayer1Distance, 1.0, 10.0 )
			[
				exec
				{
					label( "distance" )
					tooltip( "distance at which feathering starts." )
					labelwidth( 80 )
					width( 160 )
				}
			]

			floatedit( cloudLayer1Feather, 1.0, 10.0 )
			[
				exec
				{
					label( "feather" )
					tooltip( "feathering range." )
					labelwidth( 80 )
					width( 160 )
				}
			]

			}
		}
		vcontainer
		{
			hcontainer
			{
				floatedit( cloudLayer1UScale, 1.0, 10.0 )
				[
					exec
					{
						label( "texture scale u" )
						tooltip( "distance at which texture will wrap in u." )
						labelwidth( 110 )
						width( 180 )
					}
				]
				floatedit( cloudLayer1VScale, 1.0, 10.0 )
				[
					exec
					{
						label( "texture scale v" )
						tooltip( "distance at which texture will wrap in v." )
						labelwidth( 110 )
						width( 180 )
					}
				]
				floatedit( cloudLayer1UScroll, 0.025, 0.10 )
				[
					exec
					{
						label( "scroll rate u" )
						tooltip( "scaler for layer scroll in u direction." )
						labelwidth( 100 )
						width( 160 )
					}
				]
				floatedit( cloudLayer1VScroll, 0.025, 0.10 )
				[
					exec
					{
						label( "scroll rate v" )
						tooltip( "scaler for layer scroll in v direction." )
						labelwidth( 100 )
						width( 160 )
					}
				]
			}
		}
	}
	[
		exec
		{
			groupBox( "Cloud layer1" )
			visible( materialType == "sky layered hdr" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap02 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile02 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor02 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat02 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor02 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
		hcontainer
		{
			floatedit( cloudMask1UScale, 1.0, 10.0 )
			[
				exec
				{
					label( "Mask U Scale" )
					tooltip( "Distance scaler for cloud mask texture." )
					labelwidth( 100 )
					width( 200 )
				}
			]
			floatedit( cloudMask1VScale, 1.0, 10.0 )
			[
				exec
				{
					label( "Mask V Scale" )
					tooltip( "Distance scaler for cloud mask texture." )
					labelwidth( 100 )
					width( 200 )
				}
			]
			floatedit( cloudMask1UScroll, 0.025, 0.10 )
			[
				exec
				{
					label( "Mask U Offset" )
					tooltip( "texture offset for cloud mask texture." )
					labelwidth( 100 )
					width( 160 )
				}
			]
			floatedit( cloudMask1VScroll, 0.025, 0.10 )
			[
				exec
				{
					label( "Mask V Offset" )
					tooltip( "texture offset for cloud mask texture." )
					labelwidth( 100 )
					width( 160 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloud Mask1" )
			visible( materialType == "sky layered hdr" )
		}
	]
	//------------------------------------------------------------------------------------------------------------------------------------
	// layered_skybox cloud layer 2
	//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap01 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile01 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor01 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat01 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor01 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
		vcontainer
		{
			hcontainer
			{
			floatedit( cloudLayer2Height, 1.0, 10.0 )
			[
				exec
				{
					label( "height" )
					tooltip( "cloud layers height, the layers are combined in order so subsequent layer must be lower." )
					labelwidth( 80 )
					width( 160 )
				}
			]

			floatedit( cloudLayer2Distance, 1.0, 10.0 )
			[
				exec
				{
					label( "distance" )
					tooltip( "distance at which feathering starts." )
					labelwidth( 80 )
					width( 160 )
				}
			]

			floatedit( cloudLayer2Feather, 1.0, 10.0 )
			[
				exec
				{
					label( "feather" )
					tooltip( "feathering range." )
					labelwidth( 80 )
					width( 160 )
				}
			]

			}
		}
		vcontainer
		{
			hcontainer
			{
				floatedit( cloudLayer2UScale, 1.0, 10.0 )
				[
					exec
					{
						label( "texture scale u" )
						tooltip( "distance at which texture will wrap in u." )
						labelwidth( 110 )
						width( 180 )
					}
				]
				floatedit( cloudLayer2VScale, 1.0, 10.0 )
				[
					exec
					{
						label( "texture scale v" )
						tooltip( "distance at which texture will wrap in v." )
						labelwidth( 110 )
						width( 180 )
					}
				]
				floatedit( cloudLayer2UScroll, 0.025, 0.10 )
				[
					exec
					{
						label( "scroll rate u" )
						tooltip( "scaler for layer scroll in u direction." )
						labelwidth( 100 )
						width( 160 )
					}
				]
				floatedit( cloudLayer2VScroll, 0.025, 0.10 )
				[
					exec
					{
						label( "scroll rate v" )
						tooltip( "scaler for layer scroll in v direction." )
						labelwidth( 100 )
						width( 160 )
					}
				]
			}
		}
	}
	[
		exec
		{
			groupBox( "Cloud Layer2" )
			visible( materialType == "sky layered hdr" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap03 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile03 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor03 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat03 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor03 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
		hcontainer
		{
			floatedit( cloudMask2UScale, 1.0, 10.0 )
			[
				exec
				{
					label( "Mask U Scale" )
					tooltip( "Distance scaler for cloud mask texture." )
					labelwidth( 100 )
					width( 200 )
				}
			]
			floatedit( cloudMask2VScale, 1.0, 10.0 )
			[
				exec
				{
					label( "Mask V Scale" )
					tooltip( "Distance scaler for cloud mask texture." )
					labelwidth( 100 )
					width( 200 )
				}
			]
			floatedit( cloudMask2UScroll, 0.025, 0.10 )
			[
				exec
				{
					label( "Mask U Offset" )
					tooltip( "texture offset for cloud mask texture." )
					labelwidth( 100 )
					width( 160 )
				}
			]
			floatedit( cloudMask2VScroll, 0.025, 0.10 )
			[
				exec
				{
					label( "Mask V Offset" )
					tooltip( "texture offset for cloud mask texture." )
					labelwidth( 100 )
					width( 160 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Cloud Mask2" )
			visible( materialType == "sky layered hdr" )
		}
	]

	//------------------------------------------------------------------------------------------------------------------------------------
	// layered_skybox texture colour scale
	//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			floatedit( skyScaleRGB, 0.025, 0.10 )
			[
				exec
				{
					label( "Color Scale" )
					tooltip( "Scale the color channels of the skybox texture." )
					labelwidth( 100 )
					width( 160 )
				}
			]

			floatedit( skyRotation, 0.1, 1.0 )
			[
				exec
				{
					label( "Rotation" )
					tooltip( "rotation angle of the skybox cuebmap texture." )
					labelwidth( 80 )
					width( 140 )
				}
			]

			floatedit( skySize, 1.0, 10.0 )
			[
				exec
				{
					label( "Size" )
					tooltip( "world size of the skybox." )
					labelwidth( 60 )
					width( 140 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "sky layered hdr" )
			groupBox( "SkyBox Visual Controls" )
		}
	]
	//------------------------------------------------------------------------------------------------------------------------------------
	// layered_skybox cloud control for blended skyboxes
	//------------------------------------------------------------------------------------------------------------------------------------
	vcontainer
	{
		hcontainer
		{
			floatedit( cloudLayer1Blend0, 0.01, 0.1 )
			[
				exec
				{
					label( "cloudlayer1 fade @0" )
					tooltip( "cloudlayer1 fade value when sky blend is at zero." )
					labelwidth( 150 )
					width( 205 )
				}
			]

			floatedit( cloudLayer2Blend0, 0.01, 0.1 )
			[
				exec
				{
					label( "cloudlayer2 fade @0" )
					tooltip( "cloudlayer2 fade value when sky blend is at zero." )
					labelwidth( 150 )
					width( 205 )
				}
			]
			floatedit( cloudLayer1Blend1, 0.01, 0.1 )
			[
				exec
				{
					label( "cloudlayer1 fade @1" )
					tooltip( "cloudlayer1 fade value when sky blend is at one." )
					labelwidth( 150 )
					width( 205 )
				}
			]
			floatedit( cloudLayer2Blend1, 0.01, 0.1 )
			[
				exec
				{
					label( "cloudlayer2 fade @1" )
					tooltip( "cloudlayer2 fade value when sky blend is at one." )
					labelwidth( 150 )
					width( 205 )
				}
			]

		}
	}
	[
		exec
		{
			visible( materialType == "sky layered hdr" )
			groupBox( "SkyBox Cloudlayers Blend Control" )
		}
	]


//------------------------------------------------------------------------------------------------------------------------------------
// SKY-HDR END
//------------------------------------------------------------------------------------------------------------------------------------


	vcontainer
	{
		hcontainer
		{
			colorpicker( cloudLightColor )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Light Color" )
					tooltip( "Lighting on the side facing towards the sun." )
				}
			]

			colorpicker( cloudDarkColor )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Dark Color" )
					tooltip( "Lighting on the side facing away from the sun." )
				}
			]
		}
		hcontainer
		{
			colorpicker( cloudLiningColor )
			[
				exec
				{
					width( 200 )
					labelwidth( 150 )
					label( "Silver Lining Color" )
					tooltip( "Color of the silver lining." )
				}
			]

			floatedit( cloudLiningSize, 0.05, 0.20 )
			[
				exec
				{
					label( "Silver Lining Size" )
					tooltip( "Size of the silver lining. Larger values give a smaller size." )
					labelwidth( 120 )
					width( 180 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cloud" )
			groupBox( "Clouds" )
		}
	]
	vcontainer
	{
		checkbox( hasEditorMaterial )
		[
			exec
			{
				label( "Use '<materialname>_editor' as material proxy in Radiant" )
				tooltip( "click this if you want to create a duplicate material name with _editor that uses separate material parameters for display purposes in Radiant" )
				righttext()
				height( 15 )
				labelwidth( 400 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "world phong" || materialType == "tools" )
			groupBox( "Custom Radiant Material" )
			width( 400 )
		}
	]
	vcontainer
	{
		hcontainer
		{
			checkbox( objectiveColorsEnabled )
			[
				exec
				{
					righttext()
					labelwidth( 200 )
					label( "Use Objective overlay" )
					visible( materialType != "objective" )
				}
			]
		}
		vcontainer
		{
			hcontainer
			{
				colorpicker( colorObjMin )
				[
					exec
					{
						labelwidth( 40 )
						label( "Min" )
					}
				]
				floatedit( colorObjMinBaseBlend, 0.0, 1.0 )
				[
					exec
					{
						label( "Base Color Blend" )
						tooltip( "Determines how much of the base texture to blend in with the objective overlay ( 0 - 1 ) " )
						labelwidth( 120 )
						width( 220 )
					}
				]
			}
			
			hcontainer
			{
				colorpicker( colorObjMax )
				[
					exec
					{
						labelwidth( 40 )
						label( "Max" )
					}
				]
				floatedit( colorObjMaxBaseBlend, 0.0, 1.0 )
				[
					exec
					{
						label( "Base Color Blend" )
						tooltip( "Determines how much of the base texture to blend in with the objective overlay ( 0 - 1 ) " )
						labelwidth( 120 )
						width( 220 )
					}
				]
			}
		}
		[
			exec
			{
				visible( materialType == "objective" || objectiveColorsEnabled == 1 )
			}
		]						
	}
	[
		exec
		{
			groupBox( "Objective Colors" )
			visible( materialType == "objective" || materialType == "model phong" || materialType == "weapon phong" || materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon" )
		}
	]						
	hcontainer
	{
		vcontainer
		{
			checkbox( missileClip )
			[
				exec
				{
					tooltip( "Makes missiles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( bulletClip )
			[
				exec
				{
					tooltip( "Makes bullets collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( playerClip )
			[
				exec
				{
					tooltip( "Makes the player collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiClip )
			[
				exec
				{
					tooltip( "Makes AI collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( vehicleClip )
			[
				exec
				{
					tooltip( "Makes vehicles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( itemClip )
			[
				exec
				{
					tooltip( "Makes items and guns collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( canShootClip )
			[
				exec
				{
					tooltip( "AI can't shoot through this material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiSightClip )
			[
				exec
				{
					tooltip( "AI can't see through this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
		}
		vcontainer
		{
			checkbox( noFallDamage )
			[
				exec
				{
					tooltip( "Landing on this prevents damage, regardless of the height fallen." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noSteps )
			[
				exec
				{
					tooltip( "Suppresses footstep and landing sounds for this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noImpact )
			[
				exec
				{
					tooltip( "No impact mark will be made if the mark is centered on this surface.  This surface may receive a mark centered on a nearby surface, unless 'noMarks' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noMarks )
			[
				exec
				{
					tooltip( "This surface won't ever receive an impact mark.  Neighboring surfaces may still receive a mark when this surface is hit, unless 'noImpact' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noPenetrate )
			[
				exec
				{
					tooltip( "This surface will block bullet penetration." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noDrop )
			[
				exec
				{
					tooltip( "A character that dies in this brush won't drop any items, and any items that enter this brush will be removed." )
					righttext()
					height( 15 )
				}
			]
			checkbox( slick )
			[
				exec
				{
					tooltip( "Player movement has lower friction on this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( ladder )
			[
				exec
				{
					tooltip( "Player can climb this surface like a ladder." )
					righttext()
					height( 15 )
				}
			]
			checkbox( mantleOn )
			[
				exec
				{
					tooltip( "Player can climb onto this brush." )
					righttext()
					height( 15 )
				}
			]
			checkbox( mantleOver )
			[
				exec
				{
					tooltip( "Player can climb over this brush." )
					righttext()
					height( 15 )
				}
			]
			checkbox( mount )
			[
				exec
				{
					tooltip( "Player can climb over this brush." )
					righttext()
					height( 15 )
				}
			]
		}
		vcontainer
		{
			checkbox( noLightmap )
			[
				exec
				{
					tooltip( "Don't allocate a lightmap for this material, usually because it is a light source." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noDynamicLight )
			[
				exec
				{
					tooltip( "Prevent being lit by dynamic lights, usually because the material is a light source." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noCastShadow )
			[
				exec
				{
					tooltip( "Prevents ever casting shadows.  It may still receive shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( onlyCastShadow )
			[
				exec
				{
					tooltip( "Causes the material to cast shadows only.  The material itself will not render." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noReceiveDynamicShadow )
			[
				exec
				{
					label( "noRcvDynShadow" )
					tooltip( "Prevents receiving dynamic shadows.  It may still cast dynamic shadows and receive precalculated shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noDraw )
			[
				exec
				{
					tooltip( "Will be visible only in the editor." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noFog )
			[
				exec
				{
					tooltip( "Always draws as if there were no fog." )
					righttext()
					height( 15 )
				}
			]
     			checkbox( adsZscaleOn )
			[
				exec
				{
					tooltip( "Use ADS Z scale." )
					righttext()
					height( 15 )
				}
			]
			   
			checkbox( heroLight )
			[
				exec
				{
					tooltip( "Allows marked material to be effected by the Hero Light settings." )
					righttext()
					height( 15 )
				}
			]

			checkbox( drawToggle )
			[
				exec
				{
					tooltip( "Hides all faces that aren't also 'drawToggle' in the editor if draw toggle is enabled." )
					righttext()
					height( 15 )
				}
			]
			checkbox( sky )
			[
				exec
				{
					tooltip( "This is a sky material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( receiveSeeThruDecal )
			[
				exec
				{
					tooltip( "This material can receive see-through decals" )
					righttext()
					height( 15 )
				}
			]
//			checkbox( radialNormals )
//			[
//				exec
//				{
//					tooltip( "When used on a model without 'noRadialNormals' checked, surfaces with this material will have their normals auto-generated away from the model's origin." )
//					righttext()
//					height( 15 )
//				}
//			]
		}
		vcontainer
		{
			checkbox( nonColliding )
			[
				exec
				{
					tooltip( "No collision data is ever stored in the BSP, saving memory and CPU in the game." )
					righttext()
					height( 15 )
				}
			]
			checkbox( nonSolid )
			[
				exec
				{
					tooltip( "Nothing collides with this surface, but it still generates collision data.  Use 'nonColliding' if possible." )
					righttext()
					height( 15 )
				}
			]
			checkbox( transparent )
			[
				exec
				{
					tooltip( "This material isn't a boundary for portals, and geometry on the other side of it won't get deleted." )
					righttext()
					height( 15 )
				}
			]
			checkbox( detail )
			[
				exec
				{
					tooltip( "This material will never split the BSP in the map compiler.  This is usually set in the editor instead." )
					righttext()
					height( 15 )
				}
			]
			checkbox( structural )
			[
				exec
				{
					tooltip( "This material will split the BSP in the map compiler by default.  This can be overridden in the editor." )
					righttext()
					height( 15 )
				}
			]
			checkbox( portal )
			[
				exec
				{
					tooltip( "This material is a runtime portal.  The edges of brush faces using this material will cull geometry." )
					righttext()
					height( 15 )
				}
			]
			checkbox( lightPortal )
			[
				exec
				{
					tooltip( "This material starts a new region of influence for a primary light.  It doesn't split the BSP." )
					righttext()
					height( 15 )
				}
			]
   		       	checkbox( lightDemoteHint )
			[
				exec
				{
					tooltip( "This material hints that a primary light on one side should become a secondary light on the other side." )
					righttext()
					height( 15 )
				}
			]
			checkbox( origin )
			[
				exec
				{
					tooltip( "If a brush model entity has a brush with this material, the entity's origin is the center of that brush instead of the world origin." )
					righttext()
					height( 15 )
				}
			]
			checkbox( physicsGeom )
			[
				exec
				{
					tooltip( "Used in physics collision maps." )
					righttext()
					height( 15 )
				}
			]
			checkbox( hdrPortal )
			[
				exec
				{
					tooltip( "Imitates the HDR effect of eyes adjusting to significantly brighter or darker geometry on the other side of this portal." )
					righttext()
					height( 15 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType != "2d" && materialType != "SW4 fullscreen" && materialType != "emblem" && materialType != "ui3d" && materialType != "binoculars" && materialType != "crosshair" && materialType != "extra camera" && materialType != "particle cloud" && materialType != "objective" && materialType != "cod7 simple model" && materialType != "cod7 basic model" && materialType != "cod7 weapon" && materialType != "cod7 alpha model" && materialType != "cod7 simple world" && materialType != "cod7 basic world" && materialType != "cod7 alpha world" && materialType != "cloud" && materialType != "distortion" && materialType != "cod7 scroll" )
			groupBox( "Special surface properties (extremely rarely needed)" )
		}
	]
	checkbox( texScroll )
	[
		exec
		{
			visible( materialType == "model phong" && blendFunc != "Add" )
			tooltip( "Use only on tank treads, is controlled via code on vehicles" )
			righttext()
			height( 15 )
			label( "Tread Scroll" )
		}
	]
	vcontainer
	{
//		scrollbox( showAdvancedOptions )
//		[
//			exec
//			{
//				label( "Show Platform..." )
//			}
//		]
		vcontainer
		{
			hcontainer
			{
				scrollbox( colorWriteRed )
				[
					exec
					{
						label( "Color Write - Red" )
					}
				]
				scrollbox( colorWriteGreen )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Green" )
					}
				]
				scrollbox( colorWriteBlue )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Blue" )
					}
				]
				scrollbox( colorWriteAlpha )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Alpha" )
					}
				]
			}
			scrollbox( stencil )
			[
				exec
				{
					label( "Stencil" )
				}
			]
			hcontainer
			{
				scrollbox( stencilFunc1 )
				[
					exec
					{
						label( "Front - Function" )
					}
				]
				scrollbox( stencilOpFail1 )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Fail" )
					}
				]
				scrollbox( stencilOpZFail1 )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Z-fail" )
					}
				]
				scrollbox( stencilOpPass1 )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Pass" )
					}
				]
			}
			[
				exec
				{
					visible( stencil != "Disable" )
				}
			]
			hcontainer
			{
				scrollbox( stencilFunc2 )
				[
					exec
					{
						label( "Back - Function" )
					}
				]
				scrollbox( stencilOpFail2 )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Fail" )
					}
				]
				scrollbox( stencilOpZFail2 )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Z-fail" )
					}
				]
				scrollbox( stencilOpPass2 )
				[
					exec
					{
						width( 150 )
						labelwidth( 50 )
						label( "Pass" )
					}
				]
			}
			[
				exec
				{
					visible( stencil == "Two-sided" )
				}
			]
		}
		[
			exec
			{
				tooltip("??? code function?.")
				visible( showAdvancedOptions == "PC / Xenon" )
			}
		]
	}
	[
		exec
		{
			groupBox( "Advanced Options" )
		}
	]
	vcontainer
	{
		scrollbox( dynamicFoliageLightMethod )
		[
			exec
			{
				label( "lightMethod" )
				tooltip("dynamicFoliageLightingMethod tooptip")
				width( 215 )
				labelwidth( 100 )
				unsorted()
				visible( materialType == "turn this on later" )
			}
		]
		floatedit( dynamicFoliageFlexibility, 0.01, 0.05 )
		[
			exec
			{
				label( "flexibility" )
				tooltip("1 is default, 0 makes it really stiff that it won't sway in the wind, nor get pushed around.")
				labelwidth( 80 )
				width( 140 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "dynamic foliage" )
			groupBox( "Dynamic Foliage Material" )
		}
	]
	vcontainer
	{
		floatedit( dynamicFoliageSunDiffuseMin, 0.01, 0.05 )
		[
			exec
			{
				label( "sunDiffuseMin" )
				tooltip("minimum amount of sunlight received, default is 0")
				labelwidth( 120 )
				width( 180 )
			}
		]
		floatedit( dynamicFoliageSunDiffuseMax, 0.01, 0.05 )
		[
			exec
			{
				label( "sunDiffuseMax" )
				tooltip("maximum amount of sunlight received, default is 1")
				labelwidth( 120 )
				width( 180 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "dynamic foliage" || materialType == "model phong" || materialType == "model ambient" )
			groupBox( "Foliage Sunlight Adjustment" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			floatedit( uScroll, 0.01, 0.05 )
			[
				exec
				{
					label( "uScroll" )
					tooltip( "Texture scroll speed in u direction. 1.0 means the entire texture will scroll by in 1 sec." )
					labelwidth( 80 )
					width( 140 )
				}
			]
			floatedit( vScroll, 0.01, 0.05 )
			[
				exec
				{
					label( "vScroll" )
					tooltip( "Texture scroll speed in v direction. 1.0 means the entire texture will scroll by in 1 sec." )
					labelwidth( 80 )
					width( 140 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "sky noncubemap" || materialType == "sky noncubemap transition"  )
			groupBox( "sky noncubemap" )
		}
	]
	hcontainer
	{
		checkbox( scorchable )
		[
			exec
			{
				tooltip( "works on world geometry, static models, and destructible models" )
				righttext()
				height( 15 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "world phong" || materialType == "model phong" || materialType == "model ambient" || materialType == "dynamic foliage" )
		}
	]
	hcontainer
	{
		checkbox( marksDirectionFade )
		[
			exec
			{
				tooltip( "for flamethrower decals. They fade out as they face away from the decal hit normal" )
				righttext()
				height( 15 )
				labelwidth( 200 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "impact mark" && blendFunc == "Blend" )
			width( 200 )
		}
	]
	hcontainer
	{
		scrollbox( materialFeatureType )
		[
			exec
			{
				tooltip("see wiki page for explanation of material types!")
				visible( materialType == "model phong" )
				width( 400 )
				labelwidth( 240 )
			}
		]
	}
	hcontainer
	{
		scrollbox( materialFeatureTypeCOD7 )
		[
			exec
			{
				tooltip("see wiki page for explanation of material types!")
				visible( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 alpha model" )
				width( 400 )
				labelwidth( 240 )
			}
		]
	}
	hcontainer
	{
		scrollbox( materialFeatureType_WorldPhong )
		[
			exec
			{
				tooltip("see wiki page for explanation of material types!")
				visible( materialType == "world phong" )
				width( 400 )
				labelwidth( 240 )
			}
		]
	}


	vcontainer
	{
		vcontainer
		{
			hcontainer
			{
				fileedit( colorMap00 )
				[
					exec
					{
						width( 600 )
						labelwidth( 150 )
						label( "Charring Mask Map" )
					}
				]
				floatedit( cg00_x, 0.01, 0.05 )
				[
					exec
					{
						tooltip("")
						label( "Scale" )
						labelwidth( 55 )
						width( 115 )
					}
				]
			}
			hcontainer
			{
				fileedit( colorMap01 )
				[
					exec
					{
						width( 600 )
						labelwidth( 150 )
						label( "Charred Color Map" )
					}
				]
				floatedit( cg00_y, 0.01, 0.05 )
				[
					exec
					{
						tooltip("")
						label( "Scale" )
						labelwidth( 55 )
						width( 115 )
					}
				]
			}
			fileedit( colorMap02 )
			[
				exec
				{
					width( 600 )
					labelwidth( 150 )
					label( "Charred Normal Map" )
					visible( subLayerScroll == 0 )
				}
			]
			hcontainer
			{
				fxfloatedit( cg01_x, 0.01, 0.05 )
				[
					exec
					{
						labelwidth(20)
						label( "R" )
						width( 100 )
					}
				]
				fxfloatedit( cg01_y, 0.01, 0.05 )
				[
					exec
					{
						label( "G" )
						labelwidth( 20 )
						width( 100 )
					}
				]
				fxfloatedit( cg01_z, 0.01, 0.05 )
				[
					exec
					{
						label( "B" )
						labelwidth( 20 )
						width( 100 )
					}
				]
				fxfloatedit( cg01_w, 0.01, 0.05 )
				[
					exec
					{
						label( "Brightness" )
						labelwidth( 100 )
						width( 200 )
					}
				]
			}
			[
				exec
				{
					groupBox( "Ember Edge Color" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "cloth charr set up" )
			visible( ( materialType == "model phong" && materialFeatureType == "clothcharr" ) || ( ( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 alpha model" ) && materialFeatureTypeCOD7 == "clothcharr" ) )
		}
	]
	vcontainer
	{
		vcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					width( 600 )
					labelwidth( 170 )
					label( "Compress Normal Map" )
				}
			]
			fileedit( colorMap01 )
			[
				exec
				{
					width( 600 )
					labelwidth( 170 )
					label( "Stretch Normal Map" )
				}
			]
			floatedit( cg00_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Exponentially tighten up or relax the tension value falloff.")
					label( "Tension Power" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg00_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Amplify the computed tension value. This does not increase the height, just helps strengthen tension in low tension areas.")
					label( "Tension Multiplier" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg00_z, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Bump Height off Stretch / Compress bump maps")
					label( "Tension Height" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg01_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Crop % ( Left ) = cropped rect.left / full image width")
					label( "UV Crop % ( Left )" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg01_z, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Crop % ( Right ) = cropped rect.right / full image width")
					label( "UV Crop % ( Right )" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg01_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Crop % ( Top ) = cropped rect.top / full image height")
					label( "UV Crop % ( Top )" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg01_w, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Crop % ( Bottom ) = cropped rect.bottom / full image height")
					label( "UV Crop % ( Bottom )" )
					labelwidth( 170 )
					width( 250 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Tension Options" )
			visible( materialType == "model phong" && materialFeatureType == "tension" )
		}
	]

	vcontainer
	{
		vcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					tooltip("Binocular Map - red channel: dirt intensity, blue channel: scratches, green channel: dirt alpha" )
					width( 600 )
					labelwidth( 170 )
					label( "Binocular Map" )
				}
			]
			floatedit( cg00_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Horizontal warp amount ( default to 0.3 )")
					label( "Warp Amount X" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg00_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Vertical warp amount ( default to 0.3 )")
					label( "Warp Amount Y" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg01_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Scratch strength ( default to 2.0 )")
					label( "Scratch Strength" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg02_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Red channel dispersion, default to 0.95 to 1.05")
					label( "Red Dispersion Amount" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg02_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Green channel dispersion, default to 0.95 to 1.05")
					label( "Green Dispersion Amount" )
					labelwidth( 170 )
					width( 250 )
				}
			]
			floatedit( cg02_z, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Blue channel dispersion, default to 0.95 to 1.05")
					label( "Blue Dispersion Amount" )
					labelwidth( 170 )
					width( 250 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Binocular Options" )
			visible( materialType == "binoculars" )
		}
	]

	vcontainer
	{
		vcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					tooltip("Color Map" )
					width( 600 )
					labelwidth( 170 )
					label( "Color Map" )
				}
			]
			fileedit( colorMap01 )
			[
				exec
				{
					tooltip("Alpha Mask Map" )
					width( 600 )
					labelwidth( 170 )
					label( "Alpha Mask Map" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Crosshair Options" )
			visible( materialType == "crosshair" )
		}
	]

	vcontainer
	{
		vcontainer
		{
			fileedit( colorMap00 )
			[
				exec
				{
					width( 600 )
					labelwidth( 100 )
					label( "Caustics Map" )
					visible( subLayerScroll == 0 )
				}
			]

			hcontainer
			{
				floatedit( cg00_x, 0.01, 0.05 )
				[
					exec
					{
						tooltip("")
						label( "ColorR" )
						labelwidth( 100 )
						width( 180 )
					}
				]
				floatedit( cg00_y, 0.01, 0.05 )
				[
					exec
					{
						tooltip("")
						label( "ColorG" )
						labelwidth( 100 )
						width( 180 )
					}
				]
				floatedit( cg00_z, 0.01, 0.05 )
				[
					exec
					{
						tooltip("")
						label( "ColorB" )
						labelwidth( 100 )
						width( 180 )
					}
				]
			}

			floatedit( cg00_w, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Speed" )
					labelwidth( 100 )
					width( 250 )
				}
			]
			floatedit( cg01_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Scale" )
					labelwidth( 100 )
					width( 250 )
				}
			]
			floatedit( cg01_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Dummy" )
					labelwidth( 100 )
					width( 250 )
				}
			]
			floatedit( cg01_z, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Strength" )
					labelwidth( 100 )
					width( 250 )
				}
			]
			floatedit( cg01_w, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Power" )
					labelwidth( 100 )
					width( 250 )
				}
			]
			floatedit( cg02_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Level depth at which the caustics starts or is 0% bright, 0 is a good value so that the caustics start at sea level")
					label( "Height Off" )
					labelwidth( 100 )
					width( 250 )
				}
			]
			floatedit( cg02_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("Level depth at which the caustics is 100% bright, -36 is a good value so that caustics gradually get to full brightness at 3 feet deep")
					label( "Height On" )
					labelwidth( 100 )
					width( 250 )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Caustics Options" )
			visible( ( materialType == "model phong" && materialFeatureType == "caustics" ) || ( materialType == "world phong" && materialFeatureType_WorldPhong == "caustics" ) )
		}
	]

	vcontainer
	{
		vcontainer
		{
			hcontainer
			{
				fxfloatedit( cg00_x, 0.01, 0.05 )
				[
					exec
					{
						labelwidth(20)
						label( "R" )
						width( 100 )
					}
				]
				fxfloatedit( cg00_y, 0.01, 0.05 )
				[
					exec
					{
						label( "G" )
						labelwidth( 20 )
						width( 100 )
					}
				]
				fxfloatedit( cg00_z, 0.01, 0.05 )
				[
					exec
					{
						label( "B" )
						labelwidth( 20 )
						width( 100 )
					}
				]
				fxfloatedit( cg00_w, 0.01, 0.05 )
				[
					exec
					{
						label( "A" )
						labelwidth( 20 )
						width( 200 )
					}
				]
			}
			[
				exec
				{
					groupBox( "Wet Color" )
				}
			]
			floatedit( cg01_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Wetness" )
					labelwidth( 150 )
					width( 210 )
				}
			]
			fileedit( colorMap00 )
			[
				exec
		 		{
					width( 600 )
					labelwidth( 150 )
					label( "Wetness Map" )
				}
			]
			checkbox( wetnessInvert )
			[
				exec
				{
					righttext()
					height( 15 )
					label( "Invert Wetness Map" )
				}
			]
			fileedit( colorMap01 )
			[
				exec
		 		{
					width( 600 )
					labelwidth( 150 )
					label( "Wet Cosine Power Map" )
				}
			]
			floatedit( cg01_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Wet Specularity" )
					labelwidth( 150 )
					width( 210 )
				}
			]
			vcontainer
			{
				hcontainer
				{
					floatedit( cg01_z, 0.01, 0.05 )
					[
						exec
						{
							tooltip("")
							label( "Minimum" )
							labelwidth( 150 )
							width( 210 )
						}
					]
					floatedit( cg01_w, 0.01, 0.05 )
					[
						exec
						{
							tooltip("")
							label( "Maximum" )
							labelwidth( 150 )
							width( 210 )
						}
					]
					floatedit( cg02_x, 0.01, 0.05 )
					[
						exec
						{
							tooltip("")
							label( "Exponent" )
							labelwidth( 150 )
							width( 210 )
						}
					]
				}
			}
			[
				exec
				{
					visible( materialType == "model phong" && materialFeatureType == "clothwet" )
					groupBox( "Env Mapping" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "clothwet set up" )
			visible( materialType == "model phong" && materialFeatureType == "clothwet" )
		}
	]
	vcontainer
	{
		vcontainer
		{
			floatedit( cg00_x, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Gloss Scale" )
					labelwidth( 150 )
					width( 210 )
				}
			]
			floatedit( cg00_y, 0.01, 0.05 )
			[
				exec
				{
					tooltip("")
					label( "Eye Scale" )
					labelwidth( 150 )
					width( 210 )
				}
			]
			hcontainer
			{
				fxfloatedit( cg01_x, 0.01, 0.05 )
				[
					exec
					{
						labelwidth(20)
						label( "X" )
						width( 100 )
					}
				]
				fxfloatedit( cg01_y, 0.01, 0.05 )
				[
					exec
					{
						label( "Y" )
						labelwidth( 20 )
						width( 100 )
					}
				]
				fxfloatedit( cg01_z, 0.01, 0.05 )
				[
					exec
					{
						label( "Z" )
						labelwidth( 20 )
						width( 100 )
					}
				]
			}
			[
				exec
				{
					groupBox( "Eye Center" )
				}
			]

			fileedit( colorMap00 )
			[
				exec
		 		{
					width( 600 )
					labelwidth( 150 )
					label( "Gloss Map" )
				}
			]
			fileedit( colorMap01 )
			[
				exec
		 		{
					width( 600 )
					labelwidth( 150 )
					label( "Sphere Map" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "hair set up" )
			visible( materialType == "model phong" && materialFeatureType == "eyeball" )
		}
	]
	vcontainer
	{
		checkbox( subLayerScroll )
		[
			exec
			{
				righttext()
				height( 15 )
				label( "enable" )
			}
		]
		vcontainer
		{
			vcontainer
			{

				hcontainer
				{
					fileedit( colorMap05 )
					[
						exec
						{
							width( 450 )
							labelwidth( 100 )
							label( "multiply layer" )
						}
					]
					floatedit( uScroll01, 0.01, 0.05 )
					[
						exec
						{
							label( "uScroll" )
							tooltip( "Texture scroll speed in u direction. 1.0 means the entire texture will scroll by in 1 sec." )
							labelwidth( 50 )
							width( 110 )
						}
					]
					floatedit( vScroll01, 0.01, 0.05 )
					[
						exec
						{
							label( "vScroll" )
							tooltip( "Texture scroll speed in v direction. 1.0 means the entire texture will scroll by in 1 sec." )
							labelwidth( 50 )
							width( 110 )
						}
					]
				}
				hcontainer
				{
					fileedit( colorMap04 )
					[
						exec
						{
							width( 450 )
							labelwidth( 100 )
							label( "base layer" )
						}
					]

					floatedit( uScroll00, 0.01, 0.05 )
					[
						exec
						{
							label( "uScroll" )
							tooltip( "Texture scroll speed in u direction. 1.0 means the entire texture will scroll by in 1 sec." )
							labelwidth( 50 )
							width( 110 )
						}
					]

					floatedit( vScroll00, 0.01, 0.05 )
					[
						exec
						{
							label( "vScroll" )
							tooltip( "Texture scroll speed in v direction. 1.0 means the entire texture will scroll by in 1 sec." )
							labelwidth( 50 )
							width( 110 )
						}
					]
				}

			}

		}
		[
			exec
			{
				visible( (materialType == "world phong" || materialType == "model phong") && subLayerScroll == 1)
			}
		]
	}
	[
		exec
		{
			groupBox( "sub layer scroll" )
			visible( materialType == "world phong" || materialType == "model phong")
		}
	]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////COD7 Basic Model//////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vcontainer
	{
		hcontainer
		{
			fileedit( colorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamColor )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Diffuse Map" )
			visible( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon" )
		}
	]

 	vcontainer
	{
		fileedit( occMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon" )
			groupBox( "Ambient Occulsion Map" )
		}
	]

	vcontainer
	{
		fileedit( normalMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			scrollbox( tileNormal )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterNormal )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatNormal )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipNormal )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamNormal )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon" )
			groupBox( "Normal Map" )
		}
	]
  	vcontainer
	{
	  	checkbox( detailMapEnable )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Detail Map" )
				tooltip( "Click this to enable detail normals." )
			}
		]
		hcontainer
		{
		}
		[
			exec
			{
				visible( (materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon") && detailMapEnable == 0)
			}
		]
		vcontainer
		{
			hcontainer
			{
			fileedit( detailMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 100 )
					label( "Detail Normal Map" )
					tooltip("This must be a tileable normal map.")
				}
			]
			}
			hcontainer
			{
			floatedit( detailScaleX, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "x scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( detailScaleY, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "y scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( detailScaleHeight, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map more bumpy. (1.0 is default)")
					label( "height scale" )
					labelwidth( 85 )
					width( 145 )
				}
			]
			scrollbox( filterDetail )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatDetail )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			}
		}
		[
			exec
			{
				visible( (materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon") && detailMapEnable == 1)
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon" )
			groupBox( "" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( cosinePowerMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
					tooltip( "Black and white image that controls how rough a surface will appear, Black is shiny White is dull" )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileSpecular )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecular )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecular )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecular )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon" )
			groupBox( "Specular Roughness Map" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( specularCorrectionMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
					tooltip( "Black and white image that controls how much specularity (color and amount) comes out of diffuse map" )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileSpecular )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecular )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecular )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecular )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 basic model" || materialType == "cod7 weapon" )
			groupBox( "Specular Correction Map" )
		}
	]
	vcontainer
	{
		fileedit( colorDetailMap )
		[
			exec
			{
				tooltip("Leave this empty when the camo is controlled by the code.")
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			floatedit( colorDetailScaleX, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "x scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( colorDetailScaleY, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "y scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			scrollbox( filterColorDetail )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColorDetail )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColorDetail )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Camo map" )
			visible( materialType == "cod7 weapon" )
		}
	]
	hcontainer
	{
		vcontainer
		{
			checkbox( missileClip )
			[
				exec
				{
					tooltip( "Makes missiles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( bulletClip )
			[
				exec
				{
					tooltip( "Makes bullets collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( playerClip )
			[
				exec
				{
					tooltip( "Makes the player collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiClip )
			[
				exec
				{
					tooltip( "Makes AI collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( vehicleClip )
			[
				exec
				{
					tooltip( "Makes vehicles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( itemClip )
			[
				exec
				{
					tooltip( "Makes items and guns collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( canShootClip )
			[
				exec
				{
					tooltip( "AI can't shoot through this material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiSightClip )
			[
				exec
				{
					tooltip( "AI can't see through this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
		}
		vcontainer
		{
			checkbox( noSteps )
			[
				exec
				{
					tooltip( "Suppresses footstep and landing sounds for this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noImpact )
			[
				exec
				{
					tooltip( "No impact mark will be made if the mark is centered on this surface.  This surface may receive a mark centered on a nearby surface, unless 'noMarks' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noMarks )
			[
				exec
				{
					tooltip( "This surface won't ever receive an impact mark.  Neighboring surfaces may still receive a mark when this surface is hit, unless 'noImpact' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noPenetrate )
			[
				exec
				{
					tooltip( "This surface will block bullet penetration." )
					righttext()
					height( 15 )
				}
			]
			checkbox( slick )
			[
				exec
				{
					tooltip( "Player movement has lower friction on this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( receiveSeeThruDecal )
			[
				exec
				{
					tooltip( "This material can receive see-through decals" )
					righttext()
					height( 15 )
					labelwidth( 150 )
				}
			]
		}
		vcontainer
		{
			checkbox( noDynamicLight )
			[
				exec
				{
					tooltip( "Prevent being lit by dynamic lights, usually because the material is a light source." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noCastShadow )
			[
				exec
				{
					tooltip( "Prevents ever casting shadows.  It may still receive shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( onlyCastShadow )
			[
				exec
				{
					tooltip( "Causes the material to cast shadows only.  The material itself will not render." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noReceiveDynamicShadow )
			[
				exec
				{
					label( "noRcvDynShadow" )
					tooltip( "Prevents receiving dynamic shadows.  It may still cast dynamic shadows and receive precalculated shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noDraw )
			[
				exec
				{
					tooltip( "Will be visible only in the editor." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noFog )
			[
				exec
				{
					tooltip( "Always draws as if there were no fog." )
					righttext()
					height( 15 )
				}
			]
  			checkbox( adsZscaleOn )
			[
				exec
				{
					tooltip( "Use ADS Z scale." )
					righttext()
					height( 15 )
				}
			]     
			checkbox( heroLight )
			[
				exec
				{
					tooltip( "Allows marked material to be effected by the Hero Light settings." )
					righttext()
					height( 15 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 simple model" || materialType == "cod7 basic model" || materialType == "cod7 weapon" )
			groupBox( "Gameplay and Performance Properties (extremely rarely needed)" )
		}
	]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////cod7 basic world//////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileColor )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatColor )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamColor )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
				}
			]
		}
	}
	[
		exec
		{
			groupBox( "Diffuse Map" )
			visible( materialType == "cod7 simple world" || materialType == "cod7 basic world" )
		}
	]

	vcontainer
	{
		fileedit( occMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 simple world" || materialType == "cod7 basic world" )
			groupBox( "Ambient Occulsion Map" )
		}
	]


	vcontainer
	{
		fileedit( normalMap )
		[
			exec
			{
				width( 450 )
				labelwidth( 0 )
			}
		]
		hcontainer
		{
			scrollbox( tileNormal )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterNormal )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatNormal )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipNormal )
			[
				exec
				{
					tooltip("ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
			checkbox( noStreamNormal )
			[
				exec
				{
					righttext()
					labelwidth( 75 )
					label( "no stream" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 simple world" || materialType == "cod7 basic world" )
			groupBox( "Normal Map" )
		}
	]


  	vcontainer
	{
	  	checkbox( detailMapEnable )
		[
			exec
			{
				righttext()
				height( 15 )
				labelwidth( 200 )
				label( "Enable Detail Map" )
				tooltip( "Click this to enable detail normals." )
			}
		]
		hcontainer
		{
		}
		[
			exec
			{
				visible( (materialType == "none") && detailMapEnable == 0)
			}
		]
		vcontainer
		{
			hcontainer
			{
			fileedit( detailMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 100 )
					label( "Detail Normal Map" )
					tooltip("This must be a tileable normal map.")
				}
			]
			}
			hcontainer
			{
			floatedit( detailScaleX, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "x scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( detailScaleY, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map tile more often relative to the texture it's on.")
					label( "y scale" )
					labelwidth( 55 )
					width( 115 )
				}
			]
			floatedit( detailScaleHeight, 1, 4 )
			[
				exec
				{
					tooltip("A higher number makes the detail map more bumpy. (1.0 is default)")
					label( "height scale" )
					labelwidth( 85 )
					width( 145 )
				}
			]
			scrollbox( filterDetail )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatDetail )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			}
		}
		[
			exec
			{
				visible( (materialType == "none") && detailMapEnable == 1)
			}
		]
	}
	[
		exec
		{
			visible( materialType == "cod7 simple world" || materialType == "cod7 basic world" )
			groupBox( "" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( cosinePowerMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
					tooltip( "Black and white image that controls how rough a surface will appear, Black is shiny White is dull" )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileSpecular )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecular )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecular )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecular )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 simple world" || materialType == "cod7 basic world" )
			groupBox( "Specular Roughness Map" )
		}
	]
	vcontainer
	{
		hcontainer
		{
			fileedit( specularCorrectionMap )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
					tooltip( "Black and white image that controls how much specularity (color and amount) comes out of diffuse map" )
				}
			]
		}
		hcontainer
		{
			scrollbox( tileSpecular )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterSpecular )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( formatSpecular )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipSpecular )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 basic world" )
			groupBox( "Specular Correction Map" )
		}
	]
	hcontainer
	{
		vcontainer
		{
			checkbox( missileClip )
			[
				exec
				{
					tooltip( "Makes missiles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( bulletClip )
			[
				exec
				{
					tooltip( "Makes bullets collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( playerClip )
			[
				exec
				{
					tooltip( "Makes the player collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiClip )
			[
				exec
				{
					tooltip( "Makes AI collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( vehicleClip )
			[
				exec
				{
					tooltip( "Makes vehicles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( itemClip )
			[
				exec
				{
					tooltip( "Makes items and guns collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( canShootClip )
			[
				exec
				{
					tooltip( "AI can't shoot through this material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiSightClip )
			[
				exec
				{
					tooltip( "AI can't see through this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
		}
		vcontainer
		{
			checkbox( noSteps )
			[
				exec
				{
					tooltip( "Suppresses footstep and landing sounds for this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noImpact )
			[
				exec
				{
					tooltip( "No impact mark will be made if the mark is centered on this surface.  This surface may receive a mark centered on a nearby surface, unless 'noMarks' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noMarks )
			[
				exec
				{
					tooltip( "This surface won't ever receive an impact mark.  Neighboring surfaces may still receive a mark when this surface is hit, unless 'noImpact' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noPenetrate )
			[
				exec
				{
					tooltip( "This surface will block bullet penetration." )
					righttext()
					height( 15 )
				}
			]
			checkbox( slick )
			[
				exec
				{
					tooltip( "Player movement has lower friction on this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( receiveSeeThruDecal )
			[
				exec
				{
					tooltip( "This material can receive see-through decals" )
					righttext()
					height( 15 )
					labelwidth( 150 )
				}
			]
		}
		vcontainer
		{
			checkbox( noDynamicLight )
			[
				exec
				{
					tooltip( "Prevent being lit by dynamic lights, usually because the material is a light source." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noCastShadow )
			[
				exec
				{
					tooltip( "Prevents ever casting shadows.  It may still receive shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( onlyCastShadow )
			[
				exec
				{
					tooltip( "Causes the material to cast shadows only.  The material itself will not render." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noReceiveDynamicShadow )
			[
				exec
				{
					label( "noRcvDynShadow" )
					tooltip( "Prevents receiving dynamic shadows.  It may still cast dynamic shadows and receive precalculated shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noDraw )
			[
				exec
				{
					tooltip( "Will be visible only in the editor." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noFog )
			[
				exec
				{
					tooltip( "Always draws as if there were no fog." )
					righttext()
					height( 15 )
				}
			]
  			checkbox( adsZscaleOn )
			[
				exec
				{
					tooltip( "Use ADS Z scale." )
					righttext()
					height( 15 )
				}
			]
			      
			checkbox( heroLight )
			[
				exec
				{
					tooltip( "Allows marked material to be effected by the Hero Light settings." )
					righttext()
					height( 15 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 simple world" || materialType == "cod7 basic world" )
			groupBox( "Gameplay and Performance Properties (extremely rarely needed)" )
		}
	]

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// cod7 scroll //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vcontainer
	{
		floatedit( uScroll, 0.01, 0.05 )
		[
			exec
			{
				label( "uScroll" )
				tooltip( "Texture scroll speed in u direction. 1.0 means the entire texture will scroll by in 1 sec." )
				labelwidth( 50 )
				width( 110 )
			}
		]
		floatedit( vScroll, 0.01, 0.05 )
		[
			exec
			{
				label( "vScroll" )
				tooltip( "Texture scroll speed in v direction. 1.0 means the entire texture will scroll by in 1 sec." )
				labelwidth( 50 )
				width( 110 )
			}
		]
	}
	[
		exec
		{
			groupBox( "UV scroll" )
			visible( materialType == "cod7 scroll" )
		}
	]
	hcontainer
	{
		vcontainer
		{
			checkbox( missileClip )
			[
				exec
				{
					tooltip( "Makes missiles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( bulletClip )
			[
				exec
				{
					tooltip( "Makes bullets collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( playerClip )
			[
				exec
				{
					tooltip( "Makes the player collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiClip )
			[
				exec
				{
					tooltip( "Makes AI collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( vehicleClip )
			[
				exec
				{
					tooltip( "Makes vehicles collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( itemClip )
			[
				exec
				{
					tooltip( "Makes items and guns collide with this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( canShootClip )
			[
				exec
				{
					tooltip( "AI can't shoot through this material." )
					righttext()
					height( 15 )
				}
			]
			checkbox( aiSightClip )
			[
				exec
				{
					tooltip( "AI can't see through this material.  Setting this flag lets nothing whose flag isn't set collide with the material." )
					righttext()
					height( 15 )
				}
			]
			
		}
		vcontainer
		{
			checkbox( noSteps )
			[
				exec
				{
					tooltip( "Suppresses footstep and landing sounds for this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noImpact )
			[
				exec
				{
					tooltip( "No impact mark will be made if the mark is centered on this surface.  This surface may receive a mark centered on a nearby surface, unless 'noMarks' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noMarks )
			[
				exec
				{
					tooltip( "This surface won't ever receive an impact mark.  Neighboring surfaces may still receive a mark when this surface is hit, unless 'noImpact' is also set." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noPenetrate )
			[
				exec
				{
					tooltip( "This surface will block bullet penetration." )
					righttext()
					height( 15 )
				}
			]
			checkbox( slick )
			[
				exec
				{
					tooltip( "Player movement has lower friction on this surface." )
					righttext()
					height( 15 )
				}
			]
			checkbox( receiveSeeThruDecal )
			[
				exec
				{
					tooltip( "This material can receive see-through decals" )
					righttext()
					height( 15 )
					labelwidth( 150 )
				}
			]
		}
		vcontainer
		{
			checkbox( noDynamicLight )
			[
				exec
				{
					tooltip( "Prevent being lit by dynamic lights, usually because the material is a light source." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noCastShadow )
			[
				exec
				{
					tooltip( "Prevents ever casting shadows.  It may still receive shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( onlyCastShadow )
			[
				exec
				{
					tooltip( "Causes the material to cast shadows only.  The material itself will not render." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noReceiveDynamicShadow )
			[
				exec
				{
					label( "noRcvDynShadow" )
					tooltip( "Prevents receiving dynamic shadows.  It may still cast dynamic shadows and receive precalculated shadows." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noDraw )
			[
				exec
				{
					tooltip( "Will be visible only in the editor." )
					righttext()
					height( 15 )
				}
			]
			checkbox( noFog )
			[
				exec
				{
					tooltip( "Always draws as if there were no fog." )
					righttext()
					height( 15 )
				}
			]
  			checkbox( adsZscaleOn )
			[
				exec
				{
					tooltip( "Use ADS Z scale." )
					righttext()
					height( 15 )
				}
			]
			      
			checkbox( heroLight )
			[
				exec
				{
					tooltip( "Allows marked material to be effected by the Hero Light settings." )
					righttext()
					height( 15 )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "cod7 scroll" )
			groupBox( "Gameplay and Performance Properties (extremely rarely needed)" )
		}
	]

////////////////////////////////////////////// END cod7 scroll //////////////////////////////////////////////////////////////////


	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap14 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile14 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor14 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat14 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor14 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}
	[
		exec
		{
			visible( materialType == "custom" )
			groupBox( "custom materials non overridden 2D texture" )
		}
	]

	vcontainer
	{
		hcontainer
		{
			fileedit( colorMap15 )
			[
				exec
				{
					width( 450 )
					labelwidth( 0 )
				}
			]
		}
		hcontainer
		{
			scrollbox( texTile15 )
			[
				exec
				{
					width( 115 )
					labelwidth( 0 )
					tooltip( "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges" )
				}
			]
			scrollbox( filterColor15 )
			[
				exec
				{
					unsorted()
					width( 250 )
					labelwidth( 0 )
					tooltip( "Makes the image clearer when viewed from an angle, at some cost of rendering time")
				}
			]
			scrollbox( textureFormat15 )
			[
				exec
				{
					width( 165 )
					labelwidth( 0 )
				}
			]
			checkbox( nopicmipColor15 )
			[
				exec
				{
					tooltip("Ignores mip maps, image will always be high rez. Prevents the game from reducing this image's resolution when trying to save texture memory.")
					righttext()
					labelwidth( 65 )
					label( "nopicmip" )
				}
			]
		}
	}		
	[
		exec
		{
			visible( materialType == "custom" )
			groupBox( "custom materials non overridden 3D texture" )
		}
	]



}
